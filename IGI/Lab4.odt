<?xml version="1.0" encoding="UTF-8"?>

<office:document xmlns:officeooo="http://openoffice.org/2009/office" xmlns:css3t="http://www.w3.org/TR/css3-text/" xmlns:grddl="http://www.w3.org/2003/g/data-view#" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:formx="urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:chart="urn:oasis:names:tc:opendocument:xmlns:chart:1.0" xmlns:svg="urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0" xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0" xmlns:oooc="http://openoffice.org/2004/calc" xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0" xmlns:ooow="http://openoffice.org/2004/writer" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rpt="http://openoffice.org/2005/report" xmlns:draw="urn:oasis:names:tc:opendocument:xmlns:drawing:1.0" xmlns:config="urn:oasis:names:tc:opendocument:xmlns:config:1.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0" xmlns:ooo="http://openoffice.org/2004/office" xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:dr3d="urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0" xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0" xmlns:number="urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0" xmlns:of="urn:oasis:names:tc:opendocument:xmlns:of:1.2" xmlns:calcext="urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0" xmlns:tableooo="http://openoffice.org/2009/table" xmlns:drawooo="http://openoffice.org/2010/draw" xmlns:loext="urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0" xmlns:dom="http://www.w3.org/2001/xml-events" xmlns:field="urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0" xmlns:math="http://www.w3.org/1998/Math/MathML" xmlns:form="urn:oasis:names:tc:opendocument:xmlns:form:1.0" xmlns:script="urn:oasis:names:tc:opendocument:xmlns:script:1.0" xmlns:xforms="http://www.w3.org/2002/xforms" office:version="1.3" office:mimetype="application/vnd.oasis.opendocument.text">
 <office:meta><dc:date>2024-04-12T15:06:19.111544584</dc:date><meta:editing-duration>PT4M10S</meta:editing-duration><meta:editing-cycles>1</meta:editing-cycles><meta:document-statistic meta:table-count="2" meta:image-count="6" meta:object-count="0" meta:page-count="18" meta:paragraph-count="605" meta:word-count="3003" meta:character-count="26316" meta:non-whitespace-character-count="19790"/><meta:generator>LibreOffice/7.3.7.2$Linux_X86_64 LibreOffice_project/30$Build-2</meta:generator></office:meta>
 <office:settings>
  <config:config-item-set config:name="ooo:view-settings">
   <config:config-item config:name="ViewAreaTop" config:type="long">513920</config:config-item>
   <config:config-item config:name="ViewAreaLeft" config:type="long">0</config:config-item>
   <config:config-item config:name="ViewAreaWidth" config:type="long">65160</config:config-item>
   <config:config-item config:name="ViewAreaHeight" config:type="long">30200</config:config-item>
   <config:config-item config:name="ShowRedlineChanges" config:type="boolean">true</config:config-item>
   <config:config-item config:name="InBrowseMode" config:type="boolean">false</config:config-item>
   <config:config-item-map-indexed config:name="Views">
    <config:config-item-map-entry>
     <config:config-item config:name="ViewId" config:type="string">view2</config:config-item>
     <config:config-item config:name="ViewLeft" config:type="long">31911</config:config-item>
     <config:config-item config:name="ViewTop" config:type="long">528094</config:config-item>
     <config:config-item config:name="VisibleLeft" config:type="long">0</config:config-item>
     <config:config-item config:name="VisibleTop" config:type="long">513920</config:config-item>
     <config:config-item config:name="VisibleRight" config:type="long">65158</config:config-item>
     <config:config-item config:name="VisibleBottom" config:type="long">544117</config:config-item>
     <config:config-item config:name="ZoomType" config:type="short">0</config:config-item>
     <config:config-item config:name="ViewLayoutColumns" config:type="short">1</config:config-item>
     <config:config-item config:name="ViewLayoutBookMode" config:type="boolean">false</config:config-item>
     <config:config-item config:name="ZoomFactor" config:type="short">75</config:config-item>
     <config:config-item config:name="IsSelectedFrame" config:type="boolean">false</config:config-item>
     <config:config-item config:name="KeepRatio" config:type="boolean">false</config:config-item>
     <config:config-item config:name="AnchoredTextOverflowLegacy" config:type="boolean">false</config:config-item>
    </config:config-item-map-entry>
   </config:config-item-map-indexed>
  </config:config-item-set>
  <config:config-item-set config:name="ooo:configuration-settings">
   <config:config-item config:name="PrintProspect" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintReversed" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintSingleJobs" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintLeftPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintTables" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintControls" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintPageBackground" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintDrawings" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintBlackFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintAnnotationMode" config:type="short">0</config:config-item>
   <config:config-item config:name="PrintTextPlaceholder" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ProtectFields" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ProtectBookmarks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmptyDbFieldHidesPara" config:type="boolean">true</config:config-item>
   <config:config-item config:name="DisableOffPagePositioning" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SubtractFlysAnchoredAtFlys" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PropLineSpacingShrinksFirstLine" config:type="boolean">true</config:config-item>
   <config:config-item config:name="ApplyParagraphMarkFormatToNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="GutterAtTop" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TreatSingleColumnBreakAsPageBreak" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedSystemFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedComplexScriptFonts" config:type="boolean">true</config:config-item>
   <config:config-item config:name="EmbedAsianScriptFonts" config:type="boolean">true</config:config-item>
   <config:config-item config:name="EmbedLatinScriptFonts" config:type="boolean">true</config:config-item>
   <config:config-item config:name="EmbedOnlyUsedFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ContinuousEndnotes" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ClippedPictures" config:type="boolean">false</config:config-item>
   <config:config-item config:name="FloattableNomargins" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UnbreakableNumberings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="HeaderSpacingBelowLastPara" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AllowPrintJobCancel" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseOldPrinterMetrics" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabOverMargin" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabsRelativeToIndent" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseOldNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="InvertBorderSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintPaperFromSetup" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UpdateFromTemplate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommandType" config:type="int">0</config:config-item>
   <config:config-item config:name="LinkUpdateMode" config:type="short">1</config:config-item>
   <config:config-item config:name="AddParaSpacingToTableCells" config:type="boolean">true</config:config-item>
   <config:config-item config:name="FrameAutowidthWithMorePara" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommand" config:type="string"/>
   <config:config-item config:name="PrinterIndependentLayout" config:type="string">high-resolution</config:config-item>
   <config:config-item config:name="ApplyUserData" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintFaxName" config:type="string"/>
   <config:config-item config:name="CurrentDatabaseDataSource" config:type="string"/>
   <config:config-item config:name="ClipAsCharacterAnchoredWriterFlyFrames" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IsKernAsianPunctuation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SaveThumbnail" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseFormerTextWrapping" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddExternalLeading" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaTableSpacing" config:type="boolean">true</config:config-item>
   <config:config-item config:name="StylesNoDefault" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ChartAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrinterSetup" config:type="base64Binary"/>
   <config:config-item config:name="AddParaTableSpacingAtStart" config:type="boolean">true</config:config-item>
   <config:config-item config:name="Rsid" config:type="int">125879</config:config-item>
   <config:config-item config:name="EmbeddedDatabaseName" config:type="string"/>
   <config:config-item config:name="FieldAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="OutlineLevelYieldsNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="FootnoteInColumnToPageEnd" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AlignTabStopPosition" config:type="boolean">true</config:config-item>
   <config:config-item config:name="CharacterCompressionType" config:type="short">0</config:config-item>
   <config:config-item config:name="PrinterName" config:type="string"/>
   <config:config-item config:name="SaveGlobalDocumentLinks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterPaperFromSetup" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseFormerLineSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddParaLineSpacingToTableCells" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseFormerObjectPositioning" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintGraphics" config:type="boolean">true</config:config-item>
   <config:config-item config:name="SurroundTextWrapSmall" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ConsiderTextWrapOnObjPos" config:type="boolean">false</config:config-item>
   <config:config-item config:name="MsWordCompTrailingBlanks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabAtLeftIndentForParagraphsInList" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintRightPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="TabOverSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IgnoreFirstLineIndentInNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="RedlineProtectionKey" config:type="base64Binary"/>
   <config:config-item config:name="DoNotJustifyLinesWithManualBreak" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintProspectRTL" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintEmptyPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="DoNotResetParaAttrsForNumFont" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IgnoreTabsAndBlanksForLineCalculation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="LoadReadonly" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DoNotCaptureDrawObjsOnPage" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddVerticalFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UnxForceZeroExtLeading" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IsLabelDocument" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TableRowKeep" config:type="boolean">false</config:config-item>
   <config:config-item config:name="RsidRoot" config:type="int">28975</config:config-item>
   <config:config-item config:name="PrintHiddenText" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ProtectForm" config:type="boolean">false</config:config-item>
   <config:config-item config:name="MsWordCompMinLineHeightByFly" config:type="boolean">false</config:config-item>
   <config:config-item config:name="BackgroundParaOverDrawings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SaveVersionOnClose" config:type="boolean">false</config:config-item>
   <config:config-item config:name="MathBaselineAlignment" config:type="boolean">true</config:config-item>
   <config:config-item config:name="SmallCapsPercentage66" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CollapseEmptyCellPara" config:type="boolean">true</config:config-item>
   <config:config-item config:name="TabOverflow" config:type="boolean">true</config:config-item>
  </config:config-item-set>
 </office:settings>
 <office:scripts>
  <office:script script:language="ooo:Basic">
   <ooo:libraries xmlns:ooo="http://openoffice.org/2004/office" xmlns:xlink="http://www.w3.org/1999/xlink">
    <ooo:library-embedded ooo:name="Standard"/>
   </ooo:libraries>
  </office:script>
 </office:scripts>
 <office:font-face-decls>
  <style:font-face style:name="Calibri" svg:font-family="Calibri" style:font-family-generic="system" style:font-pitch="variable"/>
  <style:font-face style:name="Courier New" svg:font-family="&apos;Courier New&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
  <style:font-face style:name="Droid Sans Mono" svg:font-family="&apos;Droid Sans Mono&apos;, monospace, monospace"/>
  <style:font-face style:name="Liberation Sans" svg:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="Liberation Serif" svg:font-family="&apos;Liberation Serif&apos;" style:font-family-generic="roman" style:font-pitch="variable"/>
  <style:font-face style:name="Lohit Devanagari" svg:font-family="&apos;Lohit Devanagari&apos;"/>
  <style:font-face style:name="Lohit Devanagari1" svg:font-family="&apos;Lohit Devanagari&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
  <style:font-face style:name="Noto Sans CJK SC" svg:font-family="&apos;Noto Sans CJK SC&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
  <style:font-face style:name="Noto Serif CJK SC" svg:font-family="&apos;Noto Serif CJK SC&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
  <style:font-face style:name="Times New Roman" svg:font-family="&apos;Times New Roman&apos;" style:font-family-generic="roman" style:font-pitch="variable"/>
  <style:font-face style:name="Times New Roman1" svg:font-family="&apos;Times New Roman&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
 </office:font-face-decls>
 <office:styles>
  <style:default-style style:family="graphic">
   <style:graphic-properties svg:stroke-color="#3465a4" draw:fill-color="#729fcf" fo:wrap-option="no-wrap" draw:shadow-offset-x="0.1181in" draw:shadow-offset-y="0.1181in" draw:start-line-spacing-horizontal="0.1114in" draw:start-line-spacing-vertical="0.1114in" draw:end-line-spacing-horizontal="0.1114in" draw:end-line-spacing-vertical="0.1114in" style:flow-with-text="false"/>
   <style:paragraph-properties style:text-autospace="ideograph-alpha" style:line-break="strict" style:writing-mode="lr-tb" style:font-independent-line-spacing="false">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties style:use-window-font-color="true" loext:opacity="0%" style:font-name="Liberation Serif" fo:font-size="12pt" fo:language="en" fo:country="US" style:letter-kerning="true" style:font-name-asian="Noto Serif CJK SC" style:font-size-asian="10.5pt" style:language-asian="zh" style:country-asian="CN" style:font-name-complex="Lohit Devanagari1" style:font-size-complex="12pt" style:language-complex="hi" style:country-complex="IN"/>
  </style:default-style>
  <style:default-style style:family="paragraph">
   <style:paragraph-properties fo:hyphenation-ladder-count="no-limit" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:tab-stop-distance="0.4925in" style:writing-mode="page"/>
   <style:text-properties style:use-window-font-color="true" loext:opacity="0%" style:font-name="Liberation Serif" fo:font-size="12pt" fo:language="en" fo:country="US" style:letter-kerning="true" style:font-name-asian="Noto Serif CJK SC" style:font-size-asian="10.5pt" style:language-asian="zh" style:country-asian="CN" style:font-name-complex="Lohit Devanagari1" style:font-size-complex="12pt" style:language-complex="hi" style:country-complex="IN" fo:hyphenate="false" fo:hyphenation-remain-char-count="2" fo:hyphenation-push-char-count="2" loext:hyphenation-no-caps="false"/>
  </style:default-style>
  <style:default-style style:family="table">
   <style:table-properties table:border-model="collapsing"/>
  </style:default-style>
  <style:default-style style:family="table-row">
   <style:table-row-properties fo:keep-together="auto"/>
  </style:default-style>
  <style:style style:name="Standard" style:family="paragraph" style:class="text"/>
  <style:style style:name="Heading" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Text_20_body" style:class="text">
   <style:paragraph-properties fo:margin-top="0.1665in" fo:margin-bottom="0.0835in" style:contextual-spacing="false" fo:keep-with-next="always"/>
   <style:text-properties style:font-name="Liberation Sans" fo:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="14pt" style:font-name-asian="Noto Sans CJK SC" style:font-family-asian="&apos;Noto Sans CJK SC&apos;" style:font-family-generic-asian="system" style:font-pitch-asian="variable" style:font-size-asian="14pt" style:font-name-complex="Lohit Devanagari1" style:font-family-complex="&apos;Lohit Devanagari&apos;" style:font-family-generic-complex="system" style:font-pitch-complex="variable" style:font-size-complex="14pt"/>
  </style:style>
  <style:style style:name="Text_20_body" style:display-name="Text body" style:family="paragraph" style:parent-style-name="Standard" style:class="text">
   <style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0.0972in" style:contextual-spacing="false" fo:line-height="115%"/>
  </style:style>
  <style:style style:name="List" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="list">
   <style:text-properties style:font-size-asian="12pt" style:font-name-complex="Lohit Devanagari" style:font-family-complex="&apos;Lohit Devanagari&apos;"/>
  </style:style>
  <style:style style:name="Caption" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">
   <style:paragraph-properties fo:margin-top="0.0835in" fo:margin-bottom="0.0835in" style:contextual-spacing="false" text:number-lines="false" text:line-number="0"/>
   <style:text-properties fo:font-size="12pt" fo:font-style="italic" style:font-size-asian="12pt" style:font-style-asian="italic" style:font-name-complex="Lohit Devanagari" style:font-family-complex="&apos;Lohit Devanagari&apos;" style:font-size-complex="12pt" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="Index" style:family="paragraph" style:parent-style-name="Standard" style:class="index">
   <style:paragraph-properties text:number-lines="false" text:line-number="0"/>
   <style:text-properties style:font-size-asian="12pt" style:font-name-complex="Lohit Devanagari" style:font-family-complex="&apos;Lohit Devanagari&apos;"/>
  </style:style>
  <style:style style:name="List_20_Paragraph" style:display-name="List Paragraph" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0.5in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0.111in" style:contextual-spacing="true" fo:text-indent="0in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="ListLabel_20_190" style:display-name="ListLabel 190" style:family="text">
   <style:text-properties style:font-name-asian="Times New Roman1" style:font-family-asian="&apos;Times New Roman&apos;" style:font-family-generic-asian="system" style:font-pitch-asian="variable" style:font-name-complex="Times New Roman1" style:font-family-complex="&apos;Times New Roman&apos;" style:font-family-generic-complex="system" style:font-pitch-complex="variable"/>
  </style:style>
  <style:style style:name="ListLabel_20_191" style:display-name="ListLabel 191" style:family="text">
   <style:text-properties style:font-name-complex="Courier New" style:font-family-complex="&apos;Courier New&apos;" style:font-family-generic-complex="system" style:font-pitch-complex="variable"/>
  </style:style>
  <style:style style:name="ListLabel_20_192" style:display-name="ListLabel 192" style:family="text"/>
  <style:style style:name="ListLabel_20_193" style:display-name="ListLabel 193" style:family="text"/>
  <style:style style:name="ListLabel_20_194" style:display-name="ListLabel 194" style:family="text">
   <style:text-properties style:font-name-complex="Courier New" style:font-family-complex="&apos;Courier New&apos;" style:font-family-generic-complex="system" style:font-pitch-complex="variable"/>
  </style:style>
  <style:style style:name="ListLabel_20_195" style:display-name="ListLabel 195" style:family="text"/>
  <style:style style:name="ListLabel_20_196" style:display-name="ListLabel 196" style:family="text"/>
  <style:style style:name="ListLabel_20_197" style:display-name="ListLabel 197" style:family="text">
   <style:text-properties style:font-name-complex="Courier New" style:font-family-complex="&apos;Courier New&apos;" style:font-family-generic-complex="system" style:font-pitch-complex="variable"/>
  </style:style>
  <style:style style:name="ListLabel_20_198" style:display-name="ListLabel 198" style:family="text"/>
  <style:style style:name="ListLabel_20_226" style:display-name="ListLabel 226" style:family="text">
   <style:text-properties style:font-name-asian="Times New Roman1" style:font-family-asian="&apos;Times New Roman&apos;" style:font-family-generic-asian="system" style:font-pitch-asian="variable" style:font-name-complex="Times New Roman1" style:font-family-complex="&apos;Times New Roman&apos;" style:font-family-generic-complex="system" style:font-pitch-complex="variable"/>
  </style:style>
  <style:style style:name="ListLabel_20_227" style:display-name="ListLabel 227" style:family="text">
   <style:text-properties style:font-name-complex="Courier New" style:font-family-complex="&apos;Courier New&apos;" style:font-family-generic-complex="system" style:font-pitch-complex="variable"/>
  </style:style>
  <style:style style:name="ListLabel_20_228" style:display-name="ListLabel 228" style:family="text"/>
  <style:style style:name="ListLabel_20_229" style:display-name="ListLabel 229" style:family="text"/>
  <style:style style:name="ListLabel_20_230" style:display-name="ListLabel 230" style:family="text">
   <style:text-properties style:font-name-complex="Courier New" style:font-family-complex="&apos;Courier New&apos;" style:font-family-generic-complex="system" style:font-pitch-complex="variable"/>
  </style:style>
  <style:style style:name="ListLabel_20_231" style:display-name="ListLabel 231" style:family="text"/>
  <style:style style:name="ListLabel_20_232" style:display-name="ListLabel 232" style:family="text"/>
  <style:style style:name="ListLabel_20_233" style:display-name="ListLabel 233" style:family="text">
   <style:text-properties style:font-name-complex="Courier New" style:font-family-complex="&apos;Courier New&apos;" style:font-family-generic-complex="system" style:font-pitch-complex="variable"/>
  </style:style>
  <style:style style:name="ListLabel_20_234" style:display-name="ListLabel 234" style:family="text"/>
  <style:style style:name="Default_20_Paragraph_20_Font" style:display-name="Default Paragraph Font" style:family="text"/>
  <style:style style:name="Internet_20_link" style:display-name="Internet link" style:family="text" style:parent-style-name="Default_20_Paragraph_20_Font">
   <style:text-properties fo:color="#0563c1" loext:opacity="100%" style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color"/>
  </style:style>
  <style:style style:name="ListLabel_20_208" style:display-name="ListLabel 208" style:family="text"/>
  <style:style style:name="ListLabel_20_209" style:display-name="ListLabel 209" style:family="text"/>
  <style:style style:name="ListLabel_20_210" style:display-name="ListLabel 210" style:family="text"/>
  <style:style style:name="ListLabel_20_211" style:display-name="ListLabel 211" style:family="text"/>
  <style:style style:name="ListLabel_20_212" style:display-name="ListLabel 212" style:family="text"/>
  <style:style style:name="ListLabel_20_213" style:display-name="ListLabel 213" style:family="text"/>
  <style:style style:name="ListLabel_20_214" style:display-name="ListLabel 214" style:family="text"/>
  <style:style style:name="ListLabel_20_215" style:display-name="ListLabel 215" style:family="text"/>
  <style:style style:name="ListLabel_20_216" style:display-name="ListLabel 216" style:family="text"/>
  <style:style style:name="Graphics" style:family="graphic">
   <style:graphic-properties text:anchor-type="paragraph" svg:x="0in" svg:y="0in" style:wrap="dynamic" style:number-wrapped-paragraphs="no-limit" style:wrap-contour="false" style:vertical-pos="top" style:vertical-rel="paragraph" style:horizontal-pos="center" style:horizontal-rel="paragraph"/>
  </style:style>
  <text:outline-style style:name="Outline">
   <text:outline-level-style text:level="1" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="2" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="3" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="4" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="5" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="6" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="7" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="8" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="9" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="10" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
  </text:outline-style>
  <text:list-style style:name="WWNum22">
   <text:list-level-style-bullet text:level="1" text:style-name="ListLabel_20_190" loext:num-list-format="–" style:num-suffix="–" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.25in" fo:margin-left="0.5in"/>
    </style:list-level-properties>
    <style:text-properties fo:font-family="&apos;Times New Roman&apos;"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="ListLabel_20_191" loext:num-list-format="o" style:num-suffix="o" text:bullet-char="o">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.25in" fo:margin-left="1in"/>
    </style:list-level-properties>
    <style:text-properties fo:font-family="&apos;Courier New&apos;"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="ListLabel_20_192" loext:num-list-format="" style:num-suffix="" text:bullet-char="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.25in" fo:margin-left="1.5in"/>
    </style:list-level-properties>
    <style:text-properties fo:font-family="Wingdings" style:font-charset="x-symbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="ListLabel_20_193" loext:num-list-format="" style:num-suffix="" text:bullet-char="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.25in" fo:margin-left="2in"/>
    </style:list-level-properties>
    <style:text-properties fo:font-family="Symbol" style:font-charset="x-symbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="ListLabel_20_194" loext:num-list-format="o" style:num-suffix="o" text:bullet-char="o">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.25in" fo:margin-left="2.5in"/>
    </style:list-level-properties>
    <style:text-properties fo:font-family="&apos;Courier New&apos;"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="ListLabel_20_195" loext:num-list-format="" style:num-suffix="" text:bullet-char="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.25in" fo:margin-left="3in"/>
    </style:list-level-properties>
    <style:text-properties fo:font-family="Wingdings" style:font-charset="x-symbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="ListLabel_20_196" loext:num-list-format="" style:num-suffix="" text:bullet-char="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.25in" fo:margin-left="3.5in"/>
    </style:list-level-properties>
    <style:text-properties fo:font-family="Symbol" style:font-charset="x-symbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="ListLabel_20_197" loext:num-list-format="o" style:num-suffix="o" text:bullet-char="o">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.25in" fo:margin-left="4in"/>
    </style:list-level-properties>
    <style:text-properties fo:font-family="&apos;Courier New&apos;"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="ListLabel_20_198" loext:num-list-format="" style:num-suffix="" text:bullet-char="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.25in" fo:margin-left="4.5in"/>
    </style:list-level-properties>
    <style:text-properties fo:font-family="Wingdings" style:font-charset="x-symbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-number text:level="10" loext:num-list-format="%10%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.75in" fo:text-indent="-0.25in" fo:margin-left="2.75in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
  </text:list-style>
  <text:list-style style:name="WWNum26">
   <text:list-level-style-bullet text:level="1" text:style-name="ListLabel_20_226" loext:num-list-format="–" style:num-suffix="–" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.25in" fo:margin-left="0.5in"/>
    </style:list-level-properties>
    <style:text-properties fo:font-family="&apos;Times New Roman&apos;"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="ListLabel_20_227" loext:num-list-format="o" style:num-suffix="o" text:bullet-char="o">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.25in" fo:margin-left="1in"/>
    </style:list-level-properties>
    <style:text-properties fo:font-family="&apos;Courier New&apos;"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="ListLabel_20_228" loext:num-list-format="" style:num-suffix="" text:bullet-char="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.25in" fo:margin-left="1.5in"/>
    </style:list-level-properties>
    <style:text-properties fo:font-family="Wingdings" style:font-charset="x-symbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="ListLabel_20_229" loext:num-list-format="" style:num-suffix="" text:bullet-char="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.25in" fo:margin-left="2in"/>
    </style:list-level-properties>
    <style:text-properties fo:font-family="Symbol" style:font-charset="x-symbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="ListLabel_20_230" loext:num-list-format="o" style:num-suffix="o" text:bullet-char="o">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.25in" fo:margin-left="2.5in"/>
    </style:list-level-properties>
    <style:text-properties fo:font-family="&apos;Courier New&apos;"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="ListLabel_20_231" loext:num-list-format="" style:num-suffix="" text:bullet-char="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.25in" fo:margin-left="3in"/>
    </style:list-level-properties>
    <style:text-properties fo:font-family="Wingdings" style:font-charset="x-symbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="ListLabel_20_232" loext:num-list-format="" style:num-suffix="" text:bullet-char="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.25in" fo:margin-left="3.5in"/>
    </style:list-level-properties>
    <style:text-properties fo:font-family="Symbol" style:font-charset="x-symbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="ListLabel_20_233" loext:num-list-format="o" style:num-suffix="o" text:bullet-char="o">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.25in" fo:margin-left="4in"/>
    </style:list-level-properties>
    <style:text-properties fo:font-family="&apos;Courier New&apos;"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="ListLabel_20_234" loext:num-list-format="" style:num-suffix="" text:bullet-char="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.25in" fo:margin-left="4.5in"/>
    </style:list-level-properties>
    <style:text-properties fo:font-family="Wingdings" style:font-charset="x-symbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-number text:level="10" loext:num-list-format="%10%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.75in" fo:text-indent="-0.25in" fo:margin-left="2.75in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
  </text:list-style>
  <text:list-style style:name="WWNum24">
   <text:list-level-style-number text:level="1" text:style-name="ListLabel_20_208" loext:num-list-format="%1%)" style:num-suffix=")" style:num-format="1">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.25in" fo:margin-left="0.5in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="2" text:style-name="ListLabel_20_209" loext:num-list-format="%2%." style:num-suffix="." style:num-format="a" style:num-letter-sync="true">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.25in" fo:margin-left="1in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="3" text:style-name="ListLabel_20_210" loext:num-list-format="%3%." style:num-suffix="." style:num-format="i">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment" fo:text-align="end">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.1252in" fo:margin-left="1.5in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="4" text:style-name="ListLabel_20_211" loext:num-list-format="%4%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.25in" fo:margin-left="2in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="5" text:style-name="ListLabel_20_212" loext:num-list-format="%5%." style:num-suffix="." style:num-format="a" style:num-letter-sync="true">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.25in" fo:margin-left="2.5in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="6" text:style-name="ListLabel_20_213" loext:num-list-format="%6%." style:num-suffix="." style:num-format="i">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment" fo:text-align="end">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.1252in" fo:margin-left="3in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="7" text:style-name="ListLabel_20_214" loext:num-list-format="%7%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.25in" fo:margin-left="3.5in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="8" text:style-name="ListLabel_20_215" loext:num-list-format="%8%." style:num-suffix="." style:num-format="a" style:num-letter-sync="true">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.25in" fo:margin-left="4in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="9" text:style-name="ListLabel_20_216" loext:num-list-format="%9%." style:num-suffix="." style:num-format="i">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment" fo:text-align="end">
     <style:list-level-label-alignment text:label-followed-by="listtab" fo:text-indent="-0.1252in" fo:margin-left="4.5in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="10" loext:num-list-format="%10%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.75in" fo:text-indent="-0.25in" fo:margin-left="2.75in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
  </text:list-style>
  <text:notes-configuration text:note-class="footnote" style:num-format="1" text:start-value="0" text:footnotes-position="page" text:start-numbering-at="document"/>
  <text:notes-configuration text:note-class="endnote" style:num-format="i" text:start-value="0"/>
  <text:linenumbering-configuration text:number-lines="false" text:offset="0.1965in" style:num-format="1" text:number-position="left" text:increment="5"/>
 </office:styles>
 <office:automatic-styles>
  <style:style style:name="Table1" style:family="table">
   <style:table-properties style:width="6.4896in" fo:margin-left="0.0035in" fo:margin-top="0in" fo:margin-bottom="0in" table:align="left" style:writing-mode="lr-tb"/>
  </style:style>
  <style:style style:name="Table1.A" style:family="table-column">
   <style:table-column-properties style:column-width="6.4896in"/>
  </style:style>
  <style:style style:name="Table1.1" style:family="table-row">
   <style:table-row-properties fo:keep-together="auto"/>
  </style:style>
  <style:style style:name="Table1.A1" style:family="table-cell">
   <style:table-cell-properties fo:padding-left="0.075in" fo:padding-right="0.075in" fo:padding-top="0in" fo:padding-bottom="0in" fo:border="0.5pt solid #000000" style:writing-mode="lr-tb"/>
  </style:style>
  <style:style style:name="Table2" style:family="table">
   <style:table-properties style:width="6.4896in" fo:margin-left="0.0035in" fo:margin-top="0in" fo:margin-bottom="0in" table:align="left" style:writing-mode="lr-tb"/>
  </style:style>
  <style:style style:name="Table2.A" style:family="table-column">
   <style:table-column-properties style:column-width="6.4896in"/>
  </style:style>
  <style:style style:name="Table2.1" style:family="table-row">
   <style:table-row-properties fo:keep-together="auto"/>
  </style:style>
  <style:style style:name="Table2.A1" style:family="table-cell">
   <style:table-cell-properties fo:padding-left="0.075in" fo:padding-right="0.075in" fo:padding-top="0in" fo:padding-bottom="0in" fo:border="0.5pt solid #000000" style:writing-mode="lr-tb"/>
  </style:style>
  <style:style style:name="P1" style:family="paragraph" style:parent-style-name="List_20_Paragraph" style:list-style-name="WWNum22">
   <style:paragraph-properties fo:text-align="justify" style:justify-single-word="false"/>
   <style:text-properties officeooo:paragraph-rsid="0000712f"/>
  </style:style>
  <style:style style:name="P2" style:family="paragraph" style:parent-style-name="List_20_Paragraph" style:list-style-name="WWNum22">
   <style:paragraph-properties fo:margin-left="0.4957in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" style:contextual-spacing="true" fo:text-align="justify" style:justify-single-word="false" fo:text-indent="-0.248in" style:auto-text-indent="false"/>
   <style:text-properties officeooo:paragraph-rsid="0000712f"/>
  </style:style>
  <style:style style:name="P3" style:family="paragraph" style:parent-style-name="List_20_Paragraph" style:list-style-name="WWNum26">
   <style:text-properties officeooo:paragraph-rsid="0000712f"/>
  </style:style>
  <style:style style:name="P4" style:family="paragraph" style:parent-style-name="List_20_Paragraph" style:list-style-name="WWNum24">
   <style:paragraph-properties fo:margin-left="0.5909in" fo:margin-right="0in" fo:text-indent="-0.1972in" style:auto-text-indent="false"/>
   <style:text-properties officeooo:paragraph-rsid="0001ebb7"/>
  </style:style>
  <style:style style:name="P5" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0in" style:contextual-spacing="false" fo:line-height="100%"/>
   <style:text-properties officeooo:paragraph-rsid="0000712f"/>
  </style:style>
  <style:style style:name="P6" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0.8862in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" style:contextual-spacing="false" fo:line-height="100%" fo:text-align="justify" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties officeooo:paragraph-rsid="0000712f"/>
  </style:style>
  <style:style style:name="P7" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0in" style:contextual-spacing="false" fo:line-height="100%"/>
   <style:text-properties officeooo:paragraph-rsid="0001ebb7"/>
  </style:style>
  <style:style style:name="P8" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties officeooo:paragraph-rsid="0000712f"/>
  </style:style>
  <style:style style:name="P9" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:text-align="start" style:justify-single-word="false"/>
   <style:text-properties officeooo:paragraph-rsid="0000712f"/>
  </style:style>
  <style:style style:name="P10" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:text-align="justify" style:justify-single-word="false"/>
   <style:text-properties officeooo:paragraph-rsid="0000712f"/>
  </style:style>
  <style:style style:name="P11" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0in" style:contextual-spacing="false" fo:line-height="100%"/>
   <style:text-properties fo:font-size="11pt" fo:language="ru" fo:country="RU" officeooo:paragraph-rsid="0000712f" style:letter-kerning="false" style:font-name-asian="Calibri" style:font-size-asian="11pt" style:language-asian="en" style:country-asian="US" style:font-size-complex="11pt" style:language-complex="ar" style:country-complex="SA"/>
  </style:style>
  <style:style style:name="P12" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0in" style:contextual-spacing="false" fo:line-height="100%" fo:text-align="start" style:justify-single-word="false" fo:orphans="2" fo:widows="2"/>
   <style:text-properties fo:font-size="11pt" fo:language="ru" fo:country="RU" officeooo:paragraph-rsid="0000712f" style:letter-kerning="false" style:font-name-asian="Calibri" style:font-size-asian="11pt" style:language-asian="en" style:country-asian="US" style:font-size-complex="11pt" style:language-complex="ar" style:country-complex="SA"/>
  </style:style>
  <style:style style:name="P13" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0in" style:contextual-spacing="false" fo:line-height="100%"/>
   <style:text-properties fo:font-size="11pt" fo:language="ru" fo:country="RU" officeooo:paragraph-rsid="0001ebb7" style:letter-kerning="false" style:font-name-asian="Calibri" style:font-size-asian="11pt" style:language-asian="en" style:country-asian="US" style:font-size-complex="11pt" style:language-complex="ar" style:country-complex="SA"/>
  </style:style>
  <style:style style:name="P14" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0in" style:contextual-spacing="false" fo:line-height="100%" fo:text-align="start" style:justify-single-word="false" fo:orphans="2" fo:widows="2"/>
   <style:text-properties fo:language="ru" fo:country="RU" officeooo:paragraph-rsid="0001ebb7" style:letter-kerning="false" style:font-name-asian="Calibri" style:language-asian="en" style:country-asian="US" style:language-complex="ar" style:country-complex="SA"/>
  </style:style>
  <style:style style:name="P15" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties officeooo:paragraph-rsid="0001ebb7"/>
  </style:style>
  <style:style style:name="P16" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0.5909in" fo:margin-right="0in" fo:text-indent="-0.1972in" style:auto-text-indent="false"/>
   <style:text-properties officeooo:paragraph-rsid="0001ebb7"/>
  </style:style>
  <style:style style:name="P17" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties style:font-name="Times New Roman" fo:font-size="12pt" officeooo:paragraph-rsid="0001ebb7" style:font-size-asian="12pt" style:font-name-complex="Times New Roman1" style:font-size-complex="12pt"/>
  </style:style>
  <style:style style:name="T1" style:family="text">
   <style:text-properties style:font-name="Times New Roman" fo:font-size="12pt" fo:font-weight="bold" style:font-size-asian="12pt" style:font-weight-asian="bold" style:font-name-complex="Times New Roman1" style:font-size-complex="12pt"/>
  </style:style>
  <style:style style:name="T2" style:family="text">
   <style:text-properties style:font-name="Times New Roman" fo:font-size="12pt" style:font-size-asian="12pt" style:font-name-complex="Times New Roman1" style:font-size-complex="12pt"/>
  </style:style>
  <style:style style:name="T3" style:family="text">
   <style:text-properties style:font-name="Times New Roman" fo:font-size="12pt" style:font-size-asian="12pt" style:language-asian="ru" style:country-asian="RU" style:font-name-complex="Times New Roman1" style:font-size-complex="12pt"/>
  </style:style>
  <style:style style:name="T4" style:family="text">
   <style:text-properties style:font-name="Times New Roman" fo:font-size="12pt" fo:language="en" fo:country="US" style:font-size-asian="12pt" style:font-name-complex="Times New Roman1" style:font-size-complex="12pt"/>
  </style:style>
  <style:style style:name="T5" style:family="text">
   <style:text-properties style:font-name="Times New Roman" style:font-name-complex="Times New Roman1"/>
  </style:style>
  <style:style style:name="T6" style:family="text">
   <style:text-properties fo:font-size="24pt" style:font-size-asian="24pt" style:font-size-complex="24pt"/>
  </style:style>
  <style:style style:name="T7" style:family="text">
   <style:text-properties fo:font-size="24pt" officeooo:rsid="0000712f" style:font-size-asian="24pt" style:font-size-complex="24pt"/>
  </style:style>
  <style:style style:name="T8" style:family="text">
   <style:text-properties fo:color="#252525" loext:opacity="100%" style:font-name="Times New Roman" fo:font-size="12pt" fo:background-color="#ffffff" loext:char-shading-value="0" style:font-size-asian="12pt" style:font-name-complex="Times New Roman1" style:font-size-complex="12pt"/>
  </style:style>
  <style:style style:name="T9" style:family="text">
   <style:text-properties fo:color="#252525" loext:opacity="100%" style:font-name="Times New Roman" fo:font-size="12pt" fo:language="en" fo:country="US" fo:background-color="#ffffff" loext:char-shading-value="0" style:font-size-asian="12pt" style:font-name-complex="Times New Roman1" style:font-size-complex="12pt"/>
  </style:style>
  <style:style style:name="T10" style:family="text">
   <style:text-properties fo:color="#252525" loext:opacity="100%" style:font-name="Times New Roman" fo:font-size="12pt" fo:language="ru" fo:country="RU" style:letter-kerning="false" fo:background-color="#ffffff" loext:char-shading-value="0" style:font-name-asian="Calibri" style:font-size-asian="12pt" style:language-asian="en" style:country-asian="US" style:font-name-complex="Times New Roman1" style:font-size-complex="12pt" style:language-complex="ar" style:country-complex="SA"/>
  </style:style>
  <style:style style:name="T11" style:family="text">
   <style:text-properties fo:color="#252525" loext:opacity="100%" style:font-name="Times New Roman" fo:font-size="12pt" fo:language="ru" fo:country="RU" fo:font-weight="bold" style:letter-kerning="false" fo:background-color="#ffffff" loext:char-shading-value="0" style:font-name-asian="Calibri" style:font-size-asian="12pt" style:language-asian="en" style:country-asian="US" style:font-weight-asian="bold" style:font-name-complex="Times New Roman1" style:font-size-complex="12pt" style:language-complex="ar" style:country-complex="SA"/>
  </style:style>
  <style:style style:name="T12" style:family="text">
   <style:text-properties fo:color="#252525" loext:opacity="100%" style:font-name="Times New Roman" fo:font-size="12pt" fo:font-weight="bold" fo:background-color="#ffffff" loext:char-shading-value="0" style:font-size-asian="12pt" style:font-weight-asian="bold" style:font-name-complex="Times New Roman1" style:font-size-complex="12pt"/>
  </style:style>
  <style:style style:name="T13" style:family="text">
   <style:text-properties fo:color="#252525" loext:opacity="100%" style:font-name="Times New Roman" fo:font-size="12pt" fo:font-weight="normal" fo:background-color="#ffffff" loext:char-shading-value="0" style:font-size-asian="12pt" style:font-name-complex="Times New Roman1" style:font-size-complex="12pt"/>
  </style:style>
  <style:style style:name="T14" style:family="text">
   <style:text-properties fo:color="#252525" loext:opacity="100%" style:font-name="Times New Roman" fo:font-size="11pt" fo:language="ru" fo:country="RU" style:letter-kerning="false" fo:background-color="#ffffff" loext:char-shading-value="0" style:font-name-asian="Calibri" style:font-size-asian="11pt" style:language-asian="en" style:country-asian="US" style:font-name-complex="Times New Roman1" style:font-size-complex="11pt" style:language-complex="ar" style:country-complex="SA"/>
  </style:style>
  <style:style style:name="fr1" style:family="graphic" style:parent-style-name="Graphics">
   <style:graphic-properties style:run-through="foreground" style:wrap="none" style:vertical-pos="from-top" style:vertical-rel="paragraph" style:horizontal-pos="from-left" style:horizontal-rel="paragraph" style:mirror="none" fo:clip="rect(0in, 0in, 0in, 0in)" draw:luminance="0%" draw:contrast="0%" draw:red="0%" draw:green="0%" draw:blue="0%" draw:gamma="100%" draw:color-inversion="false" draw:image-opacity="100%" draw:color-mode="standard"/>
  </style:style>
  <style:style style:name="fr2" style:family="graphic" style:parent-style-name="Graphics">
   <style:graphic-properties style:run-through="foreground" style:wrap="none" style:mirror="none" fo:clip="rect(0in, 0in, 0in, 0in)" draw:luminance="0%" draw:contrast="0%" draw:red="0%" draw:green="0%" draw:blue="0%" draw:gamma="100%" draw:color-inversion="false" draw:image-opacity="100%" draw:color-mode="standard"/>
  </style:style>
  <style:style style:name="fr3" style:family="graphic" style:parent-style-name="Graphics">
   <style:graphic-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" style:vertical-pos="top" style:vertical-rel="baseline" fo:background-color="transparent" draw:fill="none" draw:fill-color="#ffffff" fo:padding="0in" fo:border="none" style:mirror="none" fo:clip="rect(0in, 0in, 0in, 0in)" draw:luminance="0%" draw:contrast="0%" draw:red="0%" draw:green="0%" draw:blue="0%" draw:gamma="100%" draw:color-inversion="false" draw:image-opacity="100%" draw:color-mode="standard"/>
  </style:style>
  <style:page-layout style:name="pm1">
   <style:page-layout-properties fo:page-width="8.2681in" fo:page-height="11.6929in" style:num-format="1" style:print-orientation="portrait" fo:margin-top="0.7874in" fo:margin-bottom="0.7874in" fo:margin-left="0.7874in" fo:margin-right="0.7874in" style:writing-mode="lr-tb" style:footnote-max-height="0in" loext:margin-gutter="0in">
    <style:footnote-sep style:width="0.0071in" style:distance-before-sep="0.0398in" style:distance-after-sep="0.0398in" style:line-style="solid" style:adjustment="left" style:rel-width="25%" style:color="#000000"/>
   </style:page-layout-properties>
   <style:header-style/>
   <style:footer-style/>
  </style:page-layout>
 </office:automatic-styles>
 <office:master-styles>
  <style:master-page style:name="Standard" style:page-layout-name="pm1"/>
 </office:master-styles>
 <office:body>
  <office:text text:use-soft-page-breaks="true">
   <text:sequence-decls>
    <text:sequence-decl text:display-outline-level="0" text:name="Illustration"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Table"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Text"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Drawing"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Figure"/>
   </text:sequence-decls>
   <text:p text:style-name="P9"><text:span text:style-name="T6">Лабораторная работа №4<text:line-break/></text:span><text:span text:style-name="T7">Альховик Данила гр. 253502</text:span></text:p>
   <text:p text:style-name="P8"><text:span text:style-name="T1">Тема</text:span><text:span text:style-name="T2">: Работа с файлами, классами, сериализаторами, регулярными выражениями и стандартными библиотеками.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T1">Цель</text:span><text:span text:style-name="T2">: освоить базовый синтаксис языка Python, приобрести навыки работы с файлами, классами, сериализаторами, регулярными выражениями и стандартными библиотеками и закрепить их на примере разработки интерактивных приложений.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T2"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T1">Задание 1.</text:span><text:span text:style-name="T2"> </text:span><text:span text:style-name="T8">Исходные данные представляют собой словарь. Необходимо поместить их в файл, используя сериализатор. <text:s text:c="2"/>Организовать считывание данных, поиск, сортировку в соответствии с индивидуальным заданием. Обязательно использовать классы. Реализуйте два варианта: 1)формат файлов </text:span><text:span text:style-name="T9">CSV</text:span><text:span text:style-name="T8">; 2)модуль </text:span><text:span text:style-name="T9">pickle<text:line-break/><text:line-break/></text:span><text:span text:style-name="T10">Реализуйте телефонную книгу. Составьте программу, выдающую список абонентов, имеющих телефонный номер, начинающийся на введенные с клавиатуры цифры<text:line-break/><text:line-break/>import csv</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10">import pickle</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10">class Savable:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="4"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="4"/>A class that provides methods for saving and loading data to/from different file formats.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="4"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="4"/>def save_to_csv(self, filename, data):</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>Saves the given data to a CSV file.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>Args:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>filename (str): The name of the CSV file to save.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>data (dict): The data to be saved.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>Returns:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>None</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>with open(filename, &apos;w&apos;) as f:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>writer = csv.writer(f)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>for item in data.items():</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="16"/>writer.writerow(item)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="4"/>def load_from_csv(self, filename):</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>Loads data from a CSV file.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>Args:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>filename (str): The name of the CSV file to load.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>Returns:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>dict: The loaded data.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P5"><text:soft-page-break/><text:span text:style-name="T10"><text:s text:c="8"/>with open(filename, &apos;r&apos;) as f:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>reader = csv.reader(f)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>return {rows[0]: rows[1] for rows in reader}</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="4"/>def save_to_pickle(self, filename, data):</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>Saves the given data to a pickle file.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>Args:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>filename (str): The name of the pickle file to save.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>data (object): The data to be saved.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>Returns:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>None</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>with open(filename, &apos;wb&apos;) as f:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>pickle.dump(data, f)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="4"/>def load_from_pickle(self, filename):</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>Loads data from a pickle file.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>Args:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>filename (str): The name of the pickle file to load.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>Returns:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>object: The loaded data.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>with open(filename, &apos;rb&apos;) as f:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>return pickle.load(f)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10">class PhoneBook(Savable):</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="4"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="4"/>A class representing a phone book.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="4"/>Attributes:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>entries (dict): A dictionary containing the phone book entries, where the keys are names and the values are phone numbers.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="4"/>Methods:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>add_entry(name, phone_number): Adds a new entry to the phone book.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>search(starting_digits): Searches for entries in the phone book that have phone numbers starting with the specified digits.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>sort_entries(): Sorts the phone book entries alphabetically by name.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>save_to_csv(filename): Saves the phone book entries to a CSV file.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>load_from_csv(filename): Loads phone book entries from a CSV file.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>save_to_pickle(filename): Saves the phone book entries to a pickle file.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>load_from_pickle(filename): Loads phone book entries from a pickle file.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="4"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="4"/>def __init__(self):</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>super().__init__()</text:span></text:p>
   <text:p text:style-name="P5"><text:soft-page-break/><text:span text:style-name="T10"><text:s text:c="8"/>self.entries = {}</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="4"/>def add_entry(self, name, phone_number):</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>Adds a new entry to the phone book.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>Args:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>name (str): The name of the entry.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>phone_number (str): The phone number associated with the entry.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>self.entries[name] = phone_number</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="4"/>def search(self, starting_digits):</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>Searches for entries in the phone book that have phone numbers starting with the specified digits.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>Args:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>starting_digits (str): The digits that the phone numbers should start with.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>Returns:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>dict: A dictionary containing the matching entries, where the keys are names and the values are phone numbers.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>return {name: phone for name, phone in self.entries.items() if phone.startswith(starting_digits)}</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="4"/>def sort_entries(self):</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>Sorts the phone book entries alphabetically by name.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>self.entries = dict(sorted(self.entries.items()))</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="4"/>def save_to_csv(self, filename):</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>Saves the phone book entries to a CSV file.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>Args:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>filename (str): The name of the CSV file to save the entries to.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>super().save_to_csv(filename, self.entries)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="4"/>def load_from_csv(self, filename):</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>Loads phone book entries from a CSV file.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>Args:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>filename (str): The name of the CSV file to load the entries from.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>self.entries = super().load_from_csv(filename)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="4"/>def save_to_pickle(self, filename):</text:span></text:p>
   <text:p text:style-name="P5"><text:soft-page-break/><text:span text:style-name="T10"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>Saves the phone book entries to a pickle file.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>Args:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>filename (str): The name of the pickle file to save the entries to.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>super().save_to_pickle(filename, self.entries)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="4"/>def load_from_pickle(self, filename):</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>Loads phone book entries from a pickle file.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>Args:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>filename (str): The name of the pickle file to load the entries from.</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>self.entries = super().load_from_pickle(filename)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10">def task_1():</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="4"/># Create a new phone book</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="4"/>phonebook = PhoneBook()</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="4"/>while True:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>print(&quot;\n1. Add entry&quot;)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>print(&quot;2. Search&quot;)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>print(&quot;3. Sort entries&quot;)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>print(&quot;4. Save to CSV&quot;)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>print(&quot;5. Load from CSV&quot;)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>print(&quot;6. Save to Pickle&quot;)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>print(&quot;7. Load from Pickle&quot;)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>print(&quot;8. Exit&quot;)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>choice = input(&quot;Enter your choice: &quot;)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>if choice == &apos;1&apos;:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>name = input(&quot;Enter name: &quot;)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>phone_number = input(&quot;Enter phone number: &quot;)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>phonebook.add_entry(name, phone_number)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>elif choice == &apos;2&apos;:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>starting_digits = input(&quot;Enter starting digits: &quot;)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>print(phonebook.search(starting_digits))</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>elif choice == &apos;3&apos;:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>phonebook.sort_entries()</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>elif choice == &apos;4&apos;:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>filename = input(&quot;Enter filename: &quot;)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>phonebook.save_to_csv(filename)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>elif choice == &apos;5&apos;:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>filename = input(&quot;Enter filename: &quot;)</text:span></text:p>
   <text:p text:style-name="P5"><text:soft-page-break/><text:span text:style-name="T10"><text:s text:c="12"/>phonebook.load_from_csv(filename)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>elif choice == &apos;6&apos;:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>filename = input(&quot;Enter filename: &quot;)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>phonebook.save_to_pickle(filename)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>elif choice == &apos;7&apos;:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>filename = input(&quot;Enter filename: &quot;)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>phonebook.load_from_pickle(filename)</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>elif choice == &apos;8&apos;:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>break</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"/></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="8"/>else:</text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s text:c="12"/>print(&quot;Invalid choice. Please try again.&quot;)<text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:span><draw:frame draw:style-name="fr1" draw:name="Image1" text:anchor-type="char" svg:x="1.4008in" svg:y="0.3937in" svg:width="3.1043in" svg:height="1.9063in" draw:z-index="0"><draw:image draw:mime-type="image/png">
      <office:binary-data>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
      </office:binary-data>
     </draw:image>
    </draw:frame><text:span text:style-name="T11">Задание 2.</text:span><text:span text:style-name="T10"> В соответствии с заданием своего варианта составить программу для анализа текста. Считать из исходного файла текст. Используя регулярные выражения получить искомую информацию (см. условие), вывести ее на экран и сохранить в другой файл. Заархивировать файл с результатом с помощью модуля zipfile и обеспечить получение информации о файле в архиве.</text:span></text:p>
   <text:p text:style-name="P10"><text:span text:style-name="T5">Также выполнить общее задание – определить и сохранить в файл с результатами: </text:span></text:p>
   <text:list xml:id="list321512797" text:style-name="WWNum22">
    <text:list-item>
     <text:p text:style-name="P1"><text:span text:style-name="T5">количество предложений в тексте; </text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P1"><text:span text:style-name="T5">количество предложений в тексте каждого вида отдельно (повествовательные, вопросительные и побудительные); </text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P1"><text:span text:style-name="T5">среднюю длину предложения в символах (считаются только слова); </text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P1"><text:span text:style-name="T5">среднюю длину слова в тексте в символах;</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P2"><text:span text:style-name="T5">количество смайликов в заданном тексте. Смайликом будем считать последовательность символов, удовлетворяющую условиям: </text:span></text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="P6"><text:span text:style-name="T5"><text:s/>первым символом является либо «;» (точка с запятой) либо «:» (двоеточие) ровно один раз; </text:span></text:p>
   <text:p text:style-name="P6"><text:span text:style-name="T5"><text:s/>далее может идти символ «-» (минус) сколько угодно раз (в том числе символ минус может идти ноль раз); </text:span></text:p>
   <text:p text:style-name="P6"><text:span text:style-name="T5"><text:s/>в конце обязательно идет некоторое количество (не меньше одной) одинаковых скобок из следующего набора: «(», «)», «[», «]»; </text:span></text:p>
   <text:p text:style-name="P5"><text:span text:style-name="T10"><text:s/>внутри смайлика не может встречаться никаких других символов. Например, эта последовательность является смайликом: «;---------[[[[[[[[». Эти последовательности смайликами не являются: «]», «;--»,«:»,«)».<text:line-break/><text:line-break/></text:span><text:span text:style-name="T14">Получить список всех слов текста, не включая пробелы</text:span></text:p>
   <text:p text:style-name="P12"><text:soft-page-break/><text:span text:style-name="T5">В заданной строке все пары символов, первый из которых – малая латинская буква, а второй – большая латинская буква, выделить знаками «_?_» с обеих сторон.</text:span></text:p>
   <text:p text:style-name="P12"><text:span text:style-name="T5">определить число слов, длина которых меньше 7 символов;</text:span></text:p>
   <text:p text:style-name="P12"><text:span text:style-name="T5">найти самое короткое слово, заканчивающееся на букву &apos;a&apos;;</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8">вывести все слова в порядке убывания их длин<text:line-break/><text:line-break/>import re</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8">import zipfile</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8">class TextAnalyzer:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>A class for analyzing text files.</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>Args:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>source_file (str): The path to the source file.</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>result_file (str): The path to the result file.</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>Attributes:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>source_file (str): The path to the source file.</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>result_file (str): The path to the result file.</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>zip_file (str): The name of the zip file.</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>Methods:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>analyze(): Analyzes the text from the source file.</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>save(): Saves the analysis results to the result file.</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>archive(): Archives the result file.</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>get_info(): Retrieves information about the file in the archive.</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>def __init__(self, source_file, result_file):</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>self.source_file = source_file</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>self.result_file = result_file</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>self.zip_file = &apos;result.zip&apos;</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>def analyze(self):</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>Analyzes the text from the source file.</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>Reads the text from the source file and finds the required information, such as sentences,</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>declarative sentences, interrogative sentences, imperative sentences, words, and emoticons.</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>with open(self.source_file, &apos;r&apos;) as f:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="12"/>text = f.read()</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>self.sentences = re.split(r&apos;[.!?]&apos;, text)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>self.declarative_sentences = [s for s in self.sentences if s.endswith(&apos;.&apos;)]</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>self.interrogative_sentences = [s for s in self.sentences if s.endswith(&apos;?&apos;)]</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>self.imperative_sentences = [s for s in self.sentences if s.endswith(&apos;!&apos;)]</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>self.words = re.findall(r&apos;\b\w+\b&apos;, text)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>self.emoticons = re.findall(r&apos;[:;]-*[()\[\]]+&apos;, text)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>def save(self):</text:span></text:p>
   <text:p text:style-name="P11"><text:soft-page-break/><text:span text:style-name="T8"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>Saves the analysis results to the result file.</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>Writes the analysis results, such as the number of sentences, declarative sentences,</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>interrogative sentences, imperative sentences, average sentence length, average word length,</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>and number of emoticons, to the result file.</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>with open(self.result_file, &apos;w&apos;) as f:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="12"/>f.write(f&apos;Number of sentences: {len(self.sentences)}\n&apos;)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="12"/>f.write(f&apos;Number of declarative sentences: {len(self.declarative_sentences)}\n&apos;)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="12"/>f.write(f&apos;Number of interrogative sentences: {len(self.interrogative_sentences)}\n&apos;)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="12"/>f.write(f&apos;Number of imperative sentences: {len(self.imperative_sentences)}\n&apos;)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="12"/>f.write(f&apos;Average sentence length: {sum(len(s) for s in self.sentences) / len(self.sentences)}\n&apos;)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="12"/>f.write(f&apos;Average word length: {sum(len(w) for w in self.words) / len(self.words)}\n&apos;)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="12"/>f.write(f&apos;Number of emoticons: {len(self.emoticons)}\n&apos;)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>def archive(self):</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>Archives the result file.</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>Archives the result file into a zip file.</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>with zipfile.ZipFile(self.zip_file, &apos;w&apos;) as zipf:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="12"/>zipf.write(self.result_file)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>def get_info(self):</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>Retrieves information about the file in the archive.</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>Retrieves information about the file in the archive, such as the compressed file size</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>and the uncompressed file size.</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="8"/>with zipfile.ZipFile(self.zip_file, &apos;r&apos;) as zipf:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="12"/>info = zipf.getinfo(self.result_file)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="12"/>print(f&apos;Compressed file size: {info.compress_size} bytes&apos;)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="12"/>print(f&apos;Uncompressed file size: {info.file_size} bytes&apos;)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"># Usage</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8">#analyzer = TextAnalyzer(&apos;source.txt&apos;, &apos;result.txt&apos;)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8">#analyzer.analyze()</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8">def task_2():</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/># Create an instance of TextAnalyzer</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>analyzer = TextAnalyzer(&apos;source.txt&apos;, &apos;result.txt&apos;)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/># Analyze the text</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>analyzer.analyze()</text:span></text:p>
   <text:p text:style-name="P11"><text:soft-page-break/><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/># Get all words in the text</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>words = analyzer.words</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/># Find all pairs of characters where the first is a lowercase letter and the second is an uppercase letter</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>pairs = re.findall(r&apos;[a-z][A-Z]&apos;, &apos; &apos;.join(words))</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>highlighted_pairs = [&apos;_?_&apos; + pair + &apos;_?_&apos; for pair in pairs]</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/># Find the number of words that are less than 7 characters long</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>short_words = [word for word in words if len(word) &lt; 7]</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>num_short_words = len(short_words)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/># Find the shortest word that ends with &apos;a&apos;</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>words_ending_with_a = [word for word in words if word.endswith(&apos;a&apos;)]</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>shortest_word_ending_with_a = min(words_ending_with_a, key=len)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/># Sort all words in descending order of their length</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>words_sorted_by_length = sorted(words, key=len, reverse=True)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/># Print the results</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>print(f&apos;Highlighted pairs: {highlighted_pairs}&apos;)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>print(f&apos;Number of short words: {num_short_words}&apos;)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>print(f&apos;Shortest word ending with &quot;a&quot;: {shortest_word_ending_with_a}&apos;)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>print(f&apos;Words sorted by length: {words_sorted_by_length}&apos;)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>analyzer.save()</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>analyzer.archive()</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"><text:s text:c="4"/>analyzer.get_info()</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8"/></text:p>
   <text:p text:style-name="P11"><draw:frame draw:style-name="fr2" draw:name="Image2" text:anchor-type="char" svg:width="6.6929in" svg:height="0.9217in" draw:z-index="1"><draw:image draw:mime-type="image/png">
      <office:binary-data>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
       rbtaPNg5fhfa/uqpSRWRzeZYu1v3+A41WMwmJFfL91oZSK58PxVmwnsrNllkj+M79Up19dTC
       t3fSXGgWobX/nCj/549eraYM21vOvE1Tn0Nfvq6IpTP6+7nzHs+R98M/XPL1jml7Obr3fAxV
       eObTZoJpnBerhXgMBUP+0MdlAlUuuO9pBl9ew/qhlFpdl6IB//s9m1KBKPBnR+VaD3JURih+
       sOD8iYkfoZjYTIfDh199SCqfn52J9ubCeVi/6TAM/xjVX7q02P2R7SChLiPPM4nNg97s7aUf
       DcM/OLtw8YCzC+c3HLg4xLWXPv3oR8b01LPXSDvi/DksP+jHbSGZnIkGN/5+br5tV1u54fMX
       Lp9j878u/YoHI3apeZifCf+5YkMiS8f/oMu96I/rd0b7V4P7+kH/fKcVDzj9FT8kiL3ljb/9
       6v4WuXOyKQcXbzg5Rs93/fEDMhafXa34fBuj+XBY/aK3etvBti/Gz71c3+J5vPlh1K7PVbTO
       d9rXFVYdKb30ax26ev5QyO2u5nZvllSLqdjL1PV7Oql/vD7TjjExn77vNmVSMbmVSt4u09GT
       23+52CajvtCsBj3Ym1l/eS0qe12uWa8+ffFPYT9W2Ncorwnan2iW6/iBzcTfavnOqBw0SvGD
       8O2l6TVc/CCJy269vo6CG1/U9FtufTF39aaafbuYvfnpEPxjUP9yYTeGWaELFyc4P2v2o5Hz
       D8YubDxg7NL0m7oo+VL9VWF9sf5plY4tth6b0u69+PbS4f5+0GkXTT114gRh2tFQnAzLD1h9
       Ggi5+GoOtdNWjsmTevGAy+e4/K9Df/Iq6t6uq/hJpdBdcPobOo/rxxuO+/tB/3zX7h+dvHF9
       qMWzfeOxLM1405GDO9/p0Jd46D4+dfJeH/PhsPqFTr3M1gvNFNdertO+mn7u7foWx+PND0i7
       v+jlVR365QfN853GdYWgq6fxfq1Dj+vT9BPSN2Vhj9MPtJLY4wP8ow/4Rx/wjz7gnwbghwbg
       hwbghwbghwbghwbghwbghwZP2g8jMD4UMqsvsD9yAeCfDoB/9AH/6AP+aQB+aAB+aAB+aAB+
       aAB+aAB+aAB+aPCk/TAC48N+0N19YADQBuIHAAAAeDRIvZ+14HwHAE+PvvfrJzI+BAAAAAAA
       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
      </office:binary-data>
     </draw:image>
    </draw:frame><text:span text:style-name="T8"><text:line-break/>Number of sentences: 5</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8">Number of declarative sentences: 0</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8">Number of interrogative sentences: 0</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8">Number of imperative sentences: 0</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8">Average sentence length: 88.2</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8">Average word length: 5.3478260869565215</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8">Number of emoticons: 0<text:line-break/><text:line-break/></text:span><text:span text:style-name="T12">Задание 3. <text:s/></text:span><text:span text:style-name="T8"><text:s/>В соответствии с заданием своего варианта доработать программу из ЛР3, использовав класс и обеспечить:</text:span></text:p>
   <text:p text:style-name="P8"><text:span text:style-name="T2">а) определение дополнительных параметров среднее арифметическое элементов последовательности, медиана, мода, дисперсия, СКО последовательности;</text:span></text:p>
   <text:p text:style-name="P8"><text:span text:style-name="T2">б) с помощью библиотеки matplotlib нарисовать графики разных цветов в одной координатной оси:</text:span></text:p>
   <text:list xml:id="list2961802073" text:style-name="WWNum26">
    <text:list-item>
     <text:p text:style-name="P3"><text:span text:style-name="T2">график по полученным данным разложения функции в ряд, представленным в </text:span><text:soft-page-break/><text:span text:style-name="T2">таблице, </text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P3"><text:span text:style-name="T2">график соответствующей функции, представленной с помощью модуля math</text:span><text:span text:style-name="T3">. Обеспечить отображение координатных осей, легенды, текста и аннотации.</text:span></text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="P8"><draw:frame draw:style-name="fr3" draw:name="Рисунок 1" text:anchor-type="as-char" svg:width="5.6925in" svg:height="0.7083in" draw:z-index="2"><draw:image draw:mime-type="image/png">
      <office:binary-data>iVBORw0KGgoAAAANSUhEUgAABVYAAACqCAYAAABGURTXAAAAAXNSR0IArs4c6QAAAARnQU1B
       AACxjwv8YQUAAAAJcEhZcwAAJOgAACToAYJjBRwAADtSSURBVHhe7d0HcFRVG8Zxdjeb0AlV
       MIIiEAvYKCoiIgjSpQnYFcGCiL0gKirKpyIKiqKAAiKKDRVRZFTAhoo6NhB1RNqIlKENZUgm
       u/N8u8m2wGb3DVxMlvx/M++MhpCzy733yb1nTyknAAAAAAAAAECx0LEKAAAAAAAAAMVExyoA
       AAAAAAAAFBMdqwAAAAAAAABQTHSsAgAAAAAAAEAx0bEKAAAAAAAAAMVExyoAAAAAAAAAFBMd
       qwAAAAAAAABQTHSsAgAAAAAAAEAx0bEKAAAAAAAAAMVExyoAAAAAAAAAFBMdqwAAAAAAAABQ
       THSsAgAAAAAAAEAx0bEKAAAAAAAAAMVExyoAAAAAAAAAFBMdqwAAAAAAAABQTHSsAgAAAAAA
       AEAx0bEKAAAAAAAAAMVExyoAAAAAAAAAFBMdqwAAAAAAAABQTHSsAgAAAAAAAEAx0bEKAAAA
       AAAAAMVExyoAAAAAAAAAFBMdqwAAAAAAAABQTI51rJYrV46iKIqiKIqiKIqiKIqiKOqwqUTo
       WKUoiqIoiqIoiqIoiqIoiopTiRySjlUASIS8AGBBVgCwIi8AWJAVAKyseeFYmlgbBADyAoAF
       WQHAirwAYEFWALCy5oVjaWJtEADICwAWZAUAK/ICgAVZAcDKmheOpYm1QQAgLwBYkBUArMgL
       ABZkBQAra144libWBgGAvABgQVYAsCIvAFiQFQCsrHnhWJpYGwQA8gKABVkBwIq8AGBBVgCw
       suaFY2libRAAyAsAFmQFACvyAoAFWQHAypoXjqWJtUEAIC8AWJAVAKzICwAWZAUAK2teOJYm
       1gYBgLwAYEFWALAiLwBYkBUArKx54ViaWBsEAPICgAVZAcCKvABgQVYAsLLmhWNpYm0QAMgL
       ABZkBQAr8gKABVkBwMqaF46libVBACAvAFiQFQCsyAsAFmQFACtrXjiWJtYGAYC8AGBBVgCw
       Ii8AWJAVAKyseeFYmlgbBADyAoAFWQHAirwAYEFWALCy5oVjaWJtEADICwAWZAUAK/ICgAVZ
       AcDKmheOpYm1QQAgLwBYkBVIxr9nd+i/nLdn957QfyEVkBdlmH+PNv27Vbmh/y1ryMHiISsA
       WFnzwrE0sTYIAOQFAAuyAkXa85fmPnSROlz4dOgLTsvVVw92VZehz2vJJl/oayjNyIuywbdr
       vZZ/+b5mPvOw7hjSX+efeYKyqqbryKs/UJn7KIQcPCBkBQAra144libWBgGAvABgQVaUTlvf
       v1Pnt22jNmedpbOcrraX6LnleaGW4vFr81dPqn/TJuo4aoHWHcohav5tWjqhj7KPaadb3/i9
       7HXapJiUzgvf33pp0Dnxr4lAnd13nL538Fz3b/5QI7qeHbets9q0UYeRH4e+sxTJ+Uyju7fV
       mS1P1jGZXrlijnc5d00NfGNH6Bv/G+Rg6oqcN4ECgESseeFYmlgbBADyAoAFWVGK+fdqyx8f
       6/GeRynNFT1O5cq5VaVJW/Xo2VM941SP7t3UpVMHtWvdXNn1KslT6O+Wk6f+dVqwN9TGfnbp
       p0n91bhaE132yl/KCX310PJp7Zxr1bRKTZ1xy7tanaivAyUq9jxKRb7dG7TiyzmaMLSNjkhz
       FXo/rsp99apTs739G/XOlUcXum5dnlo688bJ+vj7P7Ruy26V9tPc9+9cDW6cFn39VXpq2mZ/
       6E//Q+RgSor9twaARKx54ViaWBsEAPICgAVZUfrl/TxKp3mjx6mcq4oumL459KdJ+Hfpz3lj
       1Ltx+dDoM4+OHFzUdN7tWvJwO9Xy1lWP51f8R50JYT6temWAGngzdGz/qVpeZIcHStLhkxd7
       9ev4Tqrljr6fct42GrvSianYfv37xiU6yhPTcevyKvu6D1US/ZIHbptm9Kocyg2XKpw3UetK
       8PWTg6klcpwCBQCJWPPCsTSxNggA5AUAC7Ki9Mv79QE1j+lQcJVvr6fXFq+Hw7dykrrUcKuc
       +whd/s6u0Fdj7dHPT3ZULXeaGg56VxtLpANluxbd2kwZLq+OveRVrWbZ1VLncMqLvKUj1DQt
       +n7KpTXSTZ8f/Hxv/7pZ6n+kp9C/latqV03+J6V6VQOR8IEGh9+HK12tH/tTJXlJkoOpJXyc
       ggUAiVjzwrE0sTYIAOQFAAuyovTbPedS1YwZWedt9Yh+K/bD9k7N7p8pT82L9OZ+yyT6ten9
       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
       AAAASUVORK5CYII=
      </office:binary-data>
     </draw:image>
    </draw:frame></text:p>
   <text:p text:style-name="P8"><text:span text:style-name="T2">Здесь x – значение аргумента, F(x) – значение функции, n – количество просуммированных членов ряда, Math F(x) – значение функции, вычисленное с помощью модуля math.</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T8">в) сохранить графики в файл<text:line-break/></text:span><text:span text:style-name="T8"><draw:frame draw:style-name="fr3" draw:name="Рисунок 37" text:anchor-type="as-char" svg:width="4.3665in" svg:height="0.5252in" draw:z-index="3"><draw:image draw:mime-type="image/png">
       <office:binary-data>iVBORw0KGgoAAAANSUhEUgAABBgAAAB+CAYAAACOA6I9AAAAAXNSR0IArs4c6QAAAARnQU1B
        AACxjwv8YQUAAAAJcEhZcwAAJOgAACToAYJjBRwAAGS4SURBVHhe7Z0HVBPZ+/edSUKTjmJB
        sWNfXbF3rKuurij2Liq69ra6Fuy97tp7772s+hdde+ev2PFVET3YeEF8BQ7hl8zv+84kkxBK
        IAkJ9fmcc8/RZEgmd+7Mvc/3PqUACIIgCIIgCIIgCIIgMgkJDARBEARBEARBEARBZBoSGAiC
        IAiCIAiCIAiCyDQkMBAEQRAEQRAEQRAEkWlIYCAIgiAIgiAIgiAIItOQwEAQBEEQBEEQlkIZ
        g7CH13Hp4r+49SQCcZz4OkEQRB6EBAaCIAiCIAiCMDdcNO6uG4x6xazBFCiAAkJjJChYugXG
        HXyJBPEwIofAvcdu/wbw9vZOo9VG+3m36JoRhAGQwEAQBEEQBEEQZiUGV6fXhZPUEZ61mqFt
        Ox94ezpAwqiFBkbmiZ5730MpHk1kPwk3J6KSjFELQSkaY1UTM4MTxSMJgkgPEhgIgiAIgiAI
        wmxwiD4zBJUr98Tau1+TRATFR1yc3gRurNpolXgG4EKc+B6RvXCfsMu3CEo26IqePXumaL3Q
        b/ZZfKHQFoIwCBIYCIIgCIIgCMJcJAYjsF13bA9Lwz+BC8fGds5ghZ1xaWX8cZd2xXMCicEz
        8bNzM6x8Qz4lBJFZSGAgCIIgCIIgCHOh+IyXr6Kgb8P766a2sBFCJaRVMfUeCQzZTxQO9y4O
        l07b8Zm8FAgi05DAQBAEQRAEQRBZRPyRnnBmxBCJePFFIttQPl+EBgWLod/x7+IrBEFkBhIY
        CIIgCIIgCCJLUCJseWPIWBe0XvuKkjxmO9/xzxBPSBgGMqeS+MmnG0Yt3IvbEXLxfYIgjIUE
        BoIgCIIgCILICpQvsLihE8r1PYBwUheyHeXbv9DCIXXlCMbWEz5jdyGEnBoIwmhIYCAIgiAI
        giAIi/Mddxf4oHTThXiUIL5EZCvf7+5A4JSxGNa3M3xqlYJTsjKVLByq+WPfa8qTQRDGQAID
        QRAEQRAEQViQ+LfnsaxvDTizvAHLWMPDZxKOvyXDNaeREHEbu/78DRUdWFFkYGDtNQynqUYl
        QRgMCQwEQRDGoPiMW5smYuzGx+ILGcDF4uOLh7h99Qqu33uCN5E5Y9sq5p+5GLnsAsLMdjpK
        /Ah/hHtPP4M25giCIEQUIdjs7wMvZxkYoXKEdnecgVXZvjjwPr8YrhziP79E8M0ruHT5Ou6/
        /Iz4HPzT417swqAqBcGorpUEnoNP45v4HkEQ6UMCA0EQhIH8CNmOYY1ro/OCS4hQiC/qIeFd
        EFYHtELlwtbJFpWMxB4lvH/DhK138SU742+5KNxa1hk/effGyutfMploLB4PV/0CD8G1lCmI
        qsOO4QNt9hAEQSSh/IYXFzdhckcvOLCaOUECj37HEC0ekifhYvBo9x/w/bkobAXvDXEuLMCw
        sC3uDb+ZR/AiTjw2h6EM349epaQqkYEp2Apr840YRBCZgwQGgjCKBHy4cxybV8xDYOAcLF6z
        D5dDv1EW6DxPAl7uGYzqxWph1KkPSF9bUODdiXGo5yYRdz70NEaKoj6BuJStRbcVeH8sANVd
        yqDj0puIMvFUuI+b0d5RZ+Eo9cLEW+T6SxAEkZo4PN3oixJS9TOTcfwNO6PEt/Ia8lDs7FcR
        dsk8N1I2Fs51pyAoMica7xy+Hu4NDwl/nowjuu77Ib5OEER6kMBAECLyiDs4+NdcTPszEEs2
        ncbTb8knOy7yX8xt6wlrcaJkeANRxi8QGKkravZbjweUaTiPEoeHq9qhuE15DDjyIQMxiUPU
        +dGoaqtjbKfbGNj9NAbns3VhpUT4gT4oY+UE7zGnEWGCWia/MAwlhAWY9ndZocWaj3xvEARB
        EKngPmOvnztY4Xkp9cKEm3lQkOV/40n/CrBi+HnOsxG6DZuIWQsXYtaEgWhb2QXSZKIDiyK/
        bUNYTtytSbyNyZWk/DnK0GjpG9pQIggDIIGBIBCP59sHoKojC0ZihYIOdpCxDGSFm2DG5Si1
        kZT4FCtbuKoWA0zByui14gJCYxSA4htenFuJ/jWc4dp4Hu7Gqj6QyDMkInRLZ3hIbfDTpGvI
        UEOKOYdhZQV3SgbWHo0wcNYWnL75BK/fheHFg4vYPX8Q6heRJfdsYCTw6H0I2erIgB+4/kcN
        2LIO8J5yBSm0tQwRBAbVDo/2d9FCjCAIIj3i+edmSeG5KSmFEZfk4qt5BQ4Re/xQzMoDbecG
        4X3Kn6f4hEuBPnCX6IjxfD8MO58TYyUScLJ/YX79ZwWfv0k4JwhDIIGByOdwiDw9BOVdq6HP
        ivMI/aZ2fpd/DsaBqS3g4fEbtoUl4tVfLeAkxExKPNBt7/tUEwz37QZm1CuEmtPvIa8tE/Iz
        369NQU07BtJyATifobqgxOsVzWDH2qJCj/UIjkl7GaL8dA6T6zqrd67ExsiqYeq9bN7BiruJ
        ydWtwPBj3HdHmFHigOLBdFSXJf2eAgWs0XZjpPguQRAEkYrIjWhrzT8vZbUx73kek2O/n8PQ
        sp7w3fJS/5qIi8SZIeV0PBkkKBlwMQeuoeS4PLI0JHlSCCIIy0ACA5G/UTzDvPoV0O/IpzRU
        6Tg8WtoSlToFoKunhJ/8GDi2XY9wPfJ14sNA1C7jj7Px4gtEroaL/gcBFYSs3w5ovfZdxrsW
        yueYX8caRTtuwqsMEkByn46gLz+mkjwZpPCaeAvZ7SQbdayfyhOBdWmJ1S8y+BE6cB//ho+V
        5rfwjS2EfieolgRBEIRevm5AG/65KSk7ClfymN0adaAP6g09jYyi/5Svl6KRVZIXg3XHHch5
        WQ4ise1Xe0jL/I5LtL4jCIMggYHI13DvV6NV3UA80mdLKZ5hUUM7tSEoKY7+J9LZxlaGYmHj
        Wpj2wHDDjMipfEfQKC/IGN7YLtoXR2PEl9OB+7gWrYq0xtq3huxEcXi3tjUcdGJQrVquxacM
        VQwLo3iImTWEEA4Wzm3W4Y2hm2rxR9DLWTfJY2X8cZeSPBIEQejj25HeKCKxgffsRxkkDs6N
        cOAMmc8Sb2NSRSG/gTB3sCgy6EyOK3OsDFuH1s4uaLOWwv4IwlBIYCDyNYl3/oB31z3QG/Wn
        CEHgz+qYeanXeFxPd5chHkf6VIL/Wdq5ze0oQuaijipRI4tiA0/BkNQaioer4T8ryODdF+7L
        ZrQrmGSUy+rMx4tsX70o8WJBPZWwIoQD9T0q5iDJiMQbGF9Bs0jkm1VzrKZyXgRBEGnCRQdh
        bDUb2NWYjKv5uTCB8iUW1pOp5w3WBb67Iw2bc8xF4gvsGdsVHXtNwe6QNDaQ4h5hReuiKNF5
        K17T3hFBGAwJDES+RvE4EPXa/I2Pema0uEu/o6wqeZ0MNWZmtMsQj4M9quJ3itHL3XCRONBD
        zO7NuqH3EQtl7ky8iylVkoxyK5/V+JADbHLFo0DUVOVTYGBdew4eG7KoUr7B0kbiIpFvjFN3
        HCJXUoIg8inxt+ejVbmi8PBqAN9Ri7HvWii+xinBKb4h9MJqDKjhDIcqg7D/TT63WgUPBlWF
        BgYyr7G4ksU5HhUhgfhZzB/E2JZGm4lb8e+rb0iUf8XTs6vgX6ckKvfegsc5MfckQeRgSGAg
        8jdxJzHQqxO2pqUwKN9hfVt1Mj7WtRgqtF+Tvsu44gGmebfEan1JGohcgTJ0KRqLZSYZ27bY
        YKnyDro7N4KnhP9Z41xD5dF48/A5PqW1PlXGIOz+v7hw+SEijHWokV9EQEkh5wh/XhJPA7N6
        x2KPb0FtTglp+bG4ThESBEHkVhI+41nIm/Q90pTRCL1xHhduh6Xycou9PB6VU5YrZlhIJLwh
        7VIZHSbuxiM9iYDzE1z4X/CxYcDIKiDgrIEec8lIwOdnIXiT/oVCdOgNnL9wG2EpL5TyFbb5
        ldaWH9dcJ5a1RpGanTF1/5OMq0cRBJEKEhiIfE48bkyqjtKdN+J5MkMsFo9WtYW7UDmCdUP7
        DY9xaXwz+G3Tn10/+ow/KjVdilAK0svFKBA84yd1iAC/0JD9NAMPLbXBpLiPP6uKAgPjhM67
        osQ3UsIh4etL3Dm3H+sXTcXwXh3QuHopuFizkFaZguSpDr4jZPdYtCxtD1b1G1g41JyAC1HG
        LNu+YnM7W1EsYFG45yF8E9/RjxxBwz0hERdosoZL8JruA4IgcgmKmLe4c2obFk8ehE6NKsLd
        huWN3jLwP5W2y378i90Y5u2mroDA2KHquKBUhmjsm6s4uHEFFswORGDgHCxatRkHg0LwiaIo
        RRR4PKc2rFlXNFt4X3+oqi6KGLy9cwrbFk/GoE6NUNHdhp/rZCjjfyrthJLxL7B7mDfcpILY
        w8Cu6jgEpVIMvuPV5b1Ys3gOZs1dgjXbDuLik8g8mBeDILIOEhgIIvYuFrUohkLVfTFh8Tps
        XDMfo3+tBEeWn5AYa5TvfwjvBWMp5hLG1muECWc/pMj2zyHm3gq0L1URw89lbIoRORjBC6Wa
        xquAgXP3QwblXzCJmN3wdVTvcLGFe+BgtPh6CrjIk5jeeyBGjBqCXys76pS3lKDU75eSSnol
        vsWhgJrqcqraY/jGj+EGi0ONSE6ViFsTvSAV/5517YYDGQ5rBZ7O8YZM9TcMCnbenQMzgRME
        QaRB4j1MraqTQ0bbGMgqT8SNFIJA7P1laF1EqvXYEhpbdDAo/ZJxJIQshY+bO5rNvoZogzTw
        RNybWlU7N+k2RlYZE1NfKCxrXUSnDCbf2KIYTBeKICwOCQwEIZDwBqfn9EL9Uo7ijoQU9p71
        0WfhRXzQkbHjH61C2+LOqNBqICbMWozliwMxyq8OihcsjrYrHljOGCWyBOXzeagtxmMalnfD
        dOJOD0IxQQxgZKgy+ZZB4RGKJ7PhrTk/tgj6nxT3fLgIHPP3go2sEGr1mIyFcwfB24kVfwcL
        9wGnjAq/iNz8C2w0izL+ewZovicdoje3E91MJfAcEZQDa5kTBEGkAfcZN/asw7o1KzBvUj80
        9dR4cAnPv0Lotj/Ju0wZthNdPZKLC0KTVpyEWxQWZiAcom4tw68lZWCsPNDIfwWCwg3pPA6f
        b+zBunVrsGLeJPRr6glbrXjAolC3/dBeKWUYdnb1SC4uCE1aEZPoQhGExSGBgSCSoUTCt6/4
        Eh2vd8c3IfQQJrerCBcZA0ZiD896vTDvbBgZVLkeDl+3tIedZkHC2KLDNkt5pETjcK8i6vwe
        Rbtjv4F5HhKvj0MFqfr8GGdf7FGdXjzuz28M1yLNMP1ChFoQ4T7gLx8rcVEleDpcNmp8yi8M
        QwlVclOhSVFx4q0UXjupSTg9EEVU3hMy1J77zAiPCYIgiJwD9/Ek/L3U1aNUnmy+u9WGq+IF
        VrdwhpVnB8w/+xxvH5/F+mn+8OsagFXXv6YZSkEkJ/7tBawc0hge1rr5KRhIXLwx4tCbDOeZ
        ZHAfcdJfXU5aMyfuVl8ovFjdAs5Wnugw/yyev32Ms+unwd+vKwJWXcdXulAEYXFIYCAIU0mM
        QzwJ4XkIOS7/XkqbR6AAWxz+/1hGNlKGrkAzoUQl64Z2G94aaIwr8WZpI3ExxcCuzXp85DhE
        nRuByiVaY3mwjpdB4i1M1NQWZ6zh83eEUYtfxdM5SZ4S/HdZt1qHTxl8gOL+n6gm/A1jg/Zb
        KVQoX6KIxpvg67gU9C9uPf6A2Fy/kJcj4uF9vDEoOJzIO3D4tLMzXMVwM7ZQbxz9oUT41k5w
        L9oea5/TdoKxKJ5vRK+aHrCX6AoLyRsjK4f+h42bq7hPO9HZVfTWYwuh99EfUIZvRSf3omi/
        9jlt/BBENkECA0EQhAD3FRvaWCe5vkor44/kGRTNAxeJY/1KQCIkUOywKf3KJLrw57e1g736
        /BgrNFzyGokRB9DbqybGBUUnW5Qp3y5HEytxISerjukPjAv04D6vQysrsR/4Ji03Blcz6Aou
        4m/4CH/DFoM/xbjmLxLDcHqWL6q7aXZ9+cawsC1eHwNWXMGnXOfOEoe3F1YhwKcU7KzqYeFL
        8sfJd3zbiy7O4jNUUgrDDx9A31LlMOjEF/JUMAVlAn5EReBVyE2c2ToHw9pXg5sstdjAuvti
        V4QxPfwNe7s4i88dCUoNP4wDfUuh3KAT+EIXiiCyDRIYCIIgBBSPEFhTk+CRb7LamPfc/IbF
        twsj4MUvrKSl+uCgMQup74fQQ7NTI6uJwODX2O7rhWaLQ1Ls0nD4srkdCopuo5Iyo/Cvsds4
        cXvhK3hYiH3B2HfBvox2ceOPoKewIJfVwAyLld4gchyJL7Chk4fWTTlVY2xQrudOvMoN3l7c
        dzw/sRAD6hdPKlsnI4EhX8J9woa2dqLhysK1cBGU9z8NowryEOnAIebxXoxvWiz5s4ORodqf
        943IfcTh04a22tBG1rUwipT3x2m6UASRrZDAQBAEISC/glFlJEkLHVlDLDFzrUXu62kMKS8D
        61Ab064bV107/h9/eIh5EaQVxmDfuo6o0Go1XqZaicVgfzcXsdoEi2KDzyBefMdgEo6jr5sm
        SSTfrFpibUYxEonXMa6ClD+2FdYZmFOCyO0o8GxJY9izdijlMwLL9p7BtXv3cf3UJvzRsYJW
        5CrA2KP+/BDj4quzAcXj/Vi26RSuX9uLgOqiNxMJDPkUJV4vbQQrjeFauAv2ZPQMJIxHHoqt
        vsmTMRpbHlr5eikaaTz22MLosucTeZkQRDZDAgNBEISA/DyGeugKDI2w7K0ZDQvlW2z3LQ6J
        rDR67X1nZBLERFwbW14szyVB0V96oVVZH6x4kcYqLP40BhXTxKS6ovtB44QMFQlnMKiIrsDQ
        FCveZbBkU77GkoYysG59cZwiJPIH8RcRUMYDv6wMTl2WlIvEpYm1tCIDW2wATuaaMjs6ZVdJ
        YMi3KB7OQA0xFw3j3BX7YsQ3CLPCfd4LP535hrHrjF3G1DlWPMSMGqL3IeOMrnShCCLbIYGB
        IAhCQM4bSyV1BQZzGhbfcXNGXThIi6Dt6hDjPQoUwZj+k2YBxcLeoRDqzApOM4GV/MpolBU9
        HRiHX7HNlJTZCWfhrxEphGblg78zDOf4gd2d7SCrPBl3KPlpviDx6jg07nNQf6yz/A6mVBPz
        Mki9MOFmbhkYHD7+7QMr4bxJYMi/yM/Bv7g4J0g8MTyIUgZahkTc+aOyKKCr55vVH4yZt+Q4
        519cTNAsgedwKpNMENkNCQwEQRACibcxqZJYeUFoslqY9dgcuQQSEbqlMzxkzmgYeAOm7K0o
        QxehvjYhFgNphZG4lOYOjwIPplVT77zyx9n4/I33JugLSDiBfoV0dpRsfsX2DE9cjosBJWHT
        bBXCTflOItcRd2c/Dj9P7x5R4FFgTfV4ZIticFYn/5RfwmgvJ5QdccFIg4PD1w2tSWDI53w7
        449S2nK9MtQMDDEiNwBhDInXxqK8WIK5gHUbbIwU3zCEb2fgXyppc0BWMxAhdKEIIlshgYEg
        CEJAGYblTXSSPEorYNz1zO64cog4PgSVbO1Rc9x5E7Nac/iwpiVsNTGqQozpbj0xpsqXWFhP
        3DFmZKi/MNTIUAyR+APwc0hK8sgWHYwzGdqGCjyZ7Q3XbgeN99Ag8iw/dnVSj11LVWVJD/kF
        DCshQzH/f2CctCEIDG1IYMjPxN3A5Bpl0b6jt7Y0sE2LNTCqwAFhOJEb0cZaPd9IPIbgnMGK
        YBxuTK6Bsu07wlsU4RmbFlhDF4ogshUSGAiCIFQk4HhfNzE5It9Ydww8nZkdVw5fzo9HLUc7
        VPY/hg8m2yhR2PGbo5jNnIHVzzMRrMdO4z78jRY2ojCQiWoOKctUymrPgyEFNaI2d0CVMddy
        fDI/Iuv4trU9bHgDjS3cF8fSysHAxeHj0+s4tesvzJngD7/WdVHJqyd2RYoGAheJ2+uGwaeC
        C6ztPOATeAXf1O9kDAkMhEkk4H5gHXh02ITXNyehorizzrp0x0FjcgMQhvN9O35VCQwMHH7d
        BkMj+xLuB6KORwdsen0TkyqKHoisC7rThSKIbIUEBiJf8P37d6xduzbb2vv378UzIXIuSrxe
        0lAML+AbY41fNkWJ7xkLh8jLU1HP2QYV+u3DW4PsfCXeH5+Nxeejknsn/DiC3ppwBcYR7TZG
        JH9fh8gdneAgejpIK4yDqQ4YiiezUUtMbiZUonDrc8wwrwROCSVtHBFaEnF9XAVIhbjooeeQ
        Zo5H+TOc2bYX+/4ehOq2gjjGwLq5GGajCMP+gRVhJ5VBJhF3J+3aYbOhrkAkMBAmkBA8F/WL
        NMaip/yDO+4oemsq6kjKYKTRNX8JQ1A8mIZqwpzDuqDzzi9657hkJARjbv0iaLzoKRSIw9He
        mg0CCcqM/JfyMBBENkICA5Ev+L//9/+iYMGC6kVCNrTDhw+LZ0LkZBKvjUE5TRxoARlqzHxk
        Qswtb5wETUFdZ1t49d2LNwYZ+Up8DpqGhkXqYI6wqNUh4fxQbXlK1tUP+/RqHrH8AquQdoFV
        Yuh50aiKw8MjB3Dvm+GWf8KZwSjKiv3AWKPFGv2iBkHoRcxrwjg0xfKMjHR5EIarkqzKUHvu
        Myi5KFwc642Kvy7E5YgEfN74i7rWvawxlocZaPCTwEAYS9wdzKztBu8Zd9VjhovA2pY2ogeZ
        DN5zBGNWQzT+meCH2bfJlM0cctz5oypkDANZlUm4YZCaHYc7M2vDzXsG7qovFCLWtlR5Swnz
        lsx7DnSn0uh/JsBv9m0SHQgiiyCBwWiUCD89A761y6N0+drwDfyHYvJyCcePH1cbTCmaq6sr
        Ro8enek2atQoDB06FI0aNUr1HevWrRPPgsjRxOmUeCzAwLnHYX4ZYwxKfDw7Dt5OEthX648l
        O3Zj9249bddObNu8DisXTIF/u6pwlTKwqrcAL5LZMom4Md5LzK7NwqXrXn5Jqwf5ZfxeWkx0
        xbqh52HBRZTDx2ODUfuXVXhmsDcDv1DTZNDnGyOrg3mGxEcQRDI4RB3pjWISW9TSGGvpoHy5
        APWEHUxpZUy+k4CwnT3RdPAhhKuMBA7hK5uqxiTrPgAnDVULSGAg0kH59TEunruDcI1By33B
        mWEV4VxrGm5rH/wKPJpZQ5s417bNenxSrfk4fDkTgJr1A/GArNZMEfdgHho5smCsK2NMUBoB
        UMqveHzxHO4kXSi+74ehonMtTEu6UFA8mplUVtS2DdarLxR/Wc8goGZ9BNKFyjvEH8VAT3d4
        dNogvpA7iD86EJ7uHui04YP4Ss4m7t093Hz5jb/jjIcEBmMRdlk8dUrZScthzFWKOM4tzJ07
        N+na6bT169eLR5iHDx8+ICAgQPv5c+bMEd8hcjY/cKJ/UW0eBpn3bDwx2IVBgXdHhqJawaTk
        iEY1xhqNlr5GMlNG8QiBNTXlKR3RcftXvQ96ZehCtYEmHKva5VXg87kJaFCjLw68N8ZAkuP8
        UA+x5BcDWS1DMnIr8eX2VswM6Ic+gydi5bm3Rhp0RJ5DSJJXzRoO9ebgfoY7khw+bWir8lCQ
        eA7HuZA16N5lOUK0fxeN3b5OYPjxaN9hq8Hx2SQwEHqJvYyxFa3BMCycvUfh8PNQnJncAK5O
        9TE3xYCVXxqhrSbBOPKGa7gCXy5PR6MS9TDrXoaDOx/C4cuNtRg/oDf6D5uMJXuv411cWjct
        P29cXYC2HjIwUg90XPc0jfs0FpfHVoQ1w4B19saow88RemYyGrg6of7c+8lD9+SXMEJTTYKf
        L9usD4fiy2VMb1QC9Wbdo+TDeYn4vfC1Y2DVdKX4Qu4gfq8vP89ZoenKd+IrOZMfL09h8cAG
        8LCWovy46ybl1SKBwViU77DdtyikKjcsBtLifthtVL1eIjv573//Cz8/P/UEpNOkUimuXLki
        HmU+JkyYoPp8wbuByB3EXQhIWkw6dMYugzLKxePZlm4oa22iuMA3xrY5VqVw/Va+XopGVprY
        89ZY/1H/s0Z+bog2lKIAUxDlGjRA+TJtsSLYOB8MKF9hcQONqGGDhksyrkShfLkcTe2Tfjsj
        LY3fg0hiyL/8wPU/aqBgsU7Y/MoQhe4b9nRxBlOAReEeizDXtzs2vNIZdbHH0c+dVY3H5qve
        JRPZuIiDGNOuNVq3TqO1qg1PGxbWJbzRKq33+dZuzME0vBBJYMjr6O52Jz23POC7/XXqsLjY
        kxhQNMmzzcrJBfY2pdBt11sTQujyAfJ/MbKMzkacsFZ2KovGfr9jxpK12LJjGzaunIURnX5C
        IRkDiYs3AvaFpi0CKh5hZg2d6k5CY6Tw8N2O16kvFE4OSNogYKyc4GJvg1LddhmYB4nINZDA
        YAE4fHt8CLN7ecNdWxadBIasRfEFwSe2Y9O2E3jwhZ5auY24uDjUqFEjabISm5ubG8LCwsSj
        zENsbCzs7e3Rs2dP8RUix6N4iMCfrdQxt5ISGHYhY7dKLmINWmRCXBAWYHYt1+B9MkOHw8f1
        rdVx5/z7Ns1WIr3Qc8XDmaipmRQYFg5V+mHL4zTT6qVP1HZ0FMUC1tUXuz5nLKAqXy5DEx3P
        DUFgGEECQz6Fw6cTg1HBtTamXjHQtTLuBPqrBAQ7VGvgg24b3iYTteRBw+EpiGeyOpifIlyH
        e78HQ5s1RMOGabQG1VDMmoVV0apokNb7fGs2dE+K+06ABIY8Tww/5oonGcGMdRn4rnmYdiJS
        3vS9PbU6rMX4fsbOC312vKB4fn1wkfhn7E9w0OTxSbMxkDp7odXwv3D5Q3rmSwxO9C8uetTx
        jbFGGd81eKhnaku4PRXVNXMx/zzx6rMDL+hC5T1IYDAjCny9vxt/+lZXheomv09JYCAIowgP
        D0fhwoVT3EgFUL16dZUoYE6GDRuGli1biv8jcj68gbS7CwqrFkdSVJx026SHa9YTgwdbJqBf
        H39MWRuEdyba99+P9lb/dkaGKpNuGuharsSn6xsx1b8nuvcbg6WnX5E7aj4lLngJfDyqYMhx
        wxODal3QGRYF681DSLIbLhG3J1VS5SGRVfsT943R9ClEgkiH2Cf7EejfC72Hz8G+4BTVe1Ii
        D8WRmYPQc9A07AyONnhs51/i8PbyDiz5cyQG9+4G399+Q+cu3dB70AhMmrUKu84+QIShk0Ts
        E+wP9Eev3sMxZ18wotK/UAg9MhODeg7CtJ3BiKYLlTchgcF8KJ5gy6QpWHvyDp6/uI1t/SvC
        ShRTSWAgCBO4ceMGZLIUrnd88/X1BceZb1b6n//5H5XHBJGL4B+4CxsUVHkxSCtNwu3coTCY
        ge840ruwysVUUrwnDhpaDpAgeBSvd6J7hQrosSsNN3O9JOLO5MoqAYGRemH0vykEXsVTzPEW
        ntMSlB191biFDgkMBEEQeQ8SGCwG924FmmjDx0hgIAiT2Lx5s1ZY0G2zZs0Sj8g8ERERaNy4
        sfg/IrcQf2cGagl1+SUeGHAyRnw1b8N92IT2TvxvZguj49Z3GeZeIAgNyvDDGFy1nJ5EbSJc
        PH7EppAetAICA8fW6/AuxaBThq1AU8HlWVIcg88a6RdDAgNBEETegwQGy5FwFL1dNDlnSGAg
        CJMREjCmFBiEdvToUfEIIn8Sj+D5DeHEMrCtOzeF23ZeJAF3plaHjJGgeNddCCebijAQZfgR
        DKleHh1WP9Jf1pWLxvUZ7TBoX5T4ghqtgMAWRs/DKYU8Dp83t0NBRsgH0gOHvvMvyT/gzXsD
        5QISGAiCIPIeJDBYDvl5DPHQ5KchgYEgTOY///kPWrRokUxcEJqdnR1CQkLEo4h8iTIMu7t7
        QsY6ofnyZyY9ZHMLihfL0dyRhW31MTgfSaERhGEkvtmHARXt4d4kAPOWLsXSlG3xAsyeNgo9
        GpaAXaHuOJisKouOgODeF8d+iC9ricXhnq5gCzAo2G4zvig/4/T4Xph108A8OZkQGCL+9hEF
        Bm/MeUrJnLOOeBzpVxxOjoXQafMX/koQ5iT+SD8Ud3JEoU78/USdm4Oh+yBdSGDQS9zXr+K/
        TEQehOGeJDAQhFmIiopC2bJlkwkMQitVqhQiIyPFo4h8SdxDrPqlGGT2dTDjZioLKG8Qfx9z
        GzjCumwP7HyV5101CDMR/3QTupYRK65k2Fi49z4CwQkhiRjs93MGy7/n0u0A/78UJN7D1KpS
        9d92Xoj1Izugz6aXhi92TBYY5NrEkkKIlP9ZI0u9EpkgHvu72vNjygot134iw8rMxO/vCnum
        AKxarsUn6twcDN0H6UICQwo4fHtyGHN6e8PDe7r4monIL2FE1ggMwkkfx4oJfdC2flWULV4Y
        Li6ucC9eBlXrtUGvcctw9HF0xrG6CR9x78hKTOjWCOWLVMKYS+q6Mcovd7B1oi8aVCoB9yJl
        UNt3Bk6F6dstiMOby1sxa2gnNK5ZEaWKFULh4qVRpX57DJi2BdcMcptMxKebWzC1TyvUqsB/
        p5sbipWuivq/9MaowNXYsX87/mxbBQOP6f+s+A+3cXDZGHSpVwbuVSfgajolcJIdW2Mybuhc
        pdgXJ7BoaHt4ly+GQoU84FX3N4zZcAtfzfkkSfiMZyFvkK5ZpIxG6I3zuHA7TE+JpvzBs2fP
        VCUlUy6MmzZtisREMrryNfFPsbl7BdiX6IT1T/JYfYTEV9jRrQycq/lj/2sa5/mJhM/PEPIm
        fdFMGR2KG+cv4HZYitlBfg5DPaQGigt8Y4ui/4kU3xV3GgOLCuUpHdFpR2TqRbQiGNN/Uifi
        ZWzLw2/9I+PmKGMFBnkwdk4bh4AejVDSRlOui4GsaG10GTIWf26/zy/78z6ZGheZhgwrS0IC
        Q26B7oN0sYTAkAX2kvkFBqHE5B5M66IpMcnPVz8Hiu+ZSJYIDIpwnJzUBEVlDBjWCZU6DMfM
        xSuwfMFUDPmlEpwk6gmYkRVH64W3Uu8+KCLx5Ox6TOvvg4ousqSFiMQDQ88n4EfwGviWsU6x
        QGHg2GErUpZeT3x7EtPalYUdWxClm/TGuFmLsXzpbIzpUgOuqvNgwDrXwOAdz/QvALivuBzY
        HEWlLOxKN0f/yfOwbMVSzJ08GL9UcYFUU5aDcUC3g8k/JfHrY5xeOxV9mleAs6bWPN8kniMg
        aiVa9B5bdjSuCMdyUbi5zBflhARy4nvaxtiicsDJVL/fUBQxb3Hn1DYsnjwInRpVhLsNy1+f
        MvA/lcbijSf+xW4M83ZT/3bGDlXHBaXYYcpfnDp1CgyT+roEBASIRxD5Fv75cW1xZ3iVa4MF
        NzIoaZZL4KJuYnGHiqjWbRVuUz2vPI4CMW/v4NS2xZg8qBMaVXSHDcsvRsr441SaITHxeLF7
        GLzd1CICY1cV44KyenbgEP1gH5Yv24zzoflZ/rYkOW1ckGFlSUhgyC3QfZAuZhAYssNeMp/A
        kIiPN7dgIr9+U9viDKTOldFp0lbc+pTJjSKLCwxcJM6NrAwbVUcWRN3AuynUmng8WdUabqpa
        8YLIUA6/X0yu+yTcWIXfx8/CgkB/NHCXJAkJgsvhpo3w9ZDBobQ36lYrDjt+QlO9x8hQdvi5
        ZArSjwer0bGkDIx1OfTc+izVedwPrA1bURxgpCXgtyssDY8KJd5sao/CLAunhoG4lVINUX7C
        pemN4aqq/55SYEjArVUjMCZwAQL9G4j18dUttcCQgDt//a46dtbQRnAXantrjhUEhviPODWq
        Bhz432vlUhrV6jZE3cpFYav5/UKTeML/jAlZ67XupEnfqW78YqHyRNxIsYUTe38ZWhdJvgPF
        Fh2Ms8b5kuY5FixYoNN3SW39+vXiEUR+5nvILoxt3xJD94WJr+RO4u8sQxcfX0w5+Dxfey7l
        FxLvTUVVaernmjDnVp54I8UOfyzuL2uNIqodEc2xLIoOPmtkqAGR08l544IMK0tCAkNuge6D
        dMmswJBN9lLmBYYEhF9eg5GtysJeZTfy51v4Z3QP3I+HUWZKRmxpgUHxYBqqa3bfrZpixbs0
        hrf8GsaW11wgFq69juhZqCoRtqIprEQRoABjA2dnR5TqvB5qb2MOP97dwel9O7H3n8fQ7SPl
        m23oXFwChrFDnVkP0pzEuA9/wccqacJji/TC4WjxTQ0Jl/F7Gb7D2CIYcFJPPCX3EXv8ioJN
        w4NBi+IJZtVSu2wKLS0PBi3KF5hfV+fYMgOxYLw3nIs1wZitNxGh/TFyvNnbB2W13g4MHNpt
        wkdjnyjcZ9zYsw7r1qzAvEn90NTTNulmYAuh2/6k7N3KsJ3omoZ7q7TiJNzK517S//3vf9Gj
        R49k/aLqG6kUV65cEY8i8jdx+PgxWba6XEfi5/f4nM/v9fwE9/kG9qxbhzUr5mFSv6bw1PGg
        Ywt1Q9L0wM/XO7vCI5kRKTQpKk66ZdJCg8i55LxxQYaVJSGBIbdA90G6ZFZgyCZ7yXSBIRav
        /1kO/yYlxA11BtYeDTBg4Qk8/27m0WFZgYHDxzUt1BmUhWbVHKvep/UDfmBfV0dtp8vqzMcL
        PQJKwqmBcNfu/DOwqzUNtzLKm6R8g/VtXcDyfyMp6Y+z+gJjknUG3yTF4X8uudWvuP8nqsn4
        91h3DDylX3JSPJ4Nb6t0BAb+pj/g56D9zekKDPyxR3o6a49lZFZwqz0eZyLSyDHBRWBDW+Fh
        oj6WdemJI5nMK8V9PAl/L01oCgNn391Q3TKKF1jdwhlWnh0w/+xzvH18Fuun+cOvawBWXf9q
        5INMjkujveBgZ6equmC2Zl8aASmuYVYSHx+PWrVqqceTTnNzc0NYWO7euSYIIr/Dz/En/eGl
        EbUZZ/juVi+oFC9Wo4WzFTw7zMfZ52/xWAhz9PdD14BVuG7WBEH5D/ml0fBySGO+y1SzR+mA
        c/xMbA5ywrggw8qSkMCQW6D7IF3MnIMha+wl4bSNFBi4GDw7Nh/96hZTb9IzLAqWaYHhqy/i
        rT4zNbNY2oMh9lhfrSDAuvXE4TSNezkuBpSARHUS6as58qAR8NSEC/BGfv8TGVvPcRcCUEr1
        NxKUGnEpnQk0Cgd6FFYJEcLnM7Jq+PN+ciNefn4oPMTP8uh3FHqrsCnfYkXTQukIDAk4O7iY
        9rvSFxjkOOdfXNs/bJFu2Kc3uYISoQvrQSYeW0DWEEteZ9bdhcOnnZ3VYR/C9xfqjaM/lAjf
        2gnuRdtj7XNzLEnkuDAsaQyYrbFFMOi0kb5HZubDhw8oUqRIqnOrXr06YmPJqZwgiFwM9wk7
        OwslIIXnGotCvY/ihzIcWzu5o2j7tTDL9EAkQ35hGErohE2ap7EoMui0+UIUsn1ckGFlSUhg
        yC3QfZAuZk/ymBX2khECgzIKD/fPRLeahSBTCQsSOFXsgPGbbiDCfO5iaWPxHAzKCFxY6I+u
        Xf0x72w40qzrIP+AvT2SDGghx8BVPWeReHU0ymomVlWSx4wu1ncc6VVIPckx9vDdk34qDe7L
        dawZ0wMdO/bA2M33UyWcVARPx0+CBwP/eYzEHc0DL+FTmva7Eq93jsdCvaUh5Aga7pn0mzMQ
        GIJG6ByrSfKoh7gDfnBQub7wTVYN0x6Yofb2t73o4izuRkhKYfjhA+hbqhwGnTBfXV1lwg98
        j4lBjDnb9x+IN8PPzyy3bt2CTJYU5qJpvr6+4Dh65BMEkXv5trcLnMU5R1JqOA4f6ItS5Qbh
        BBXItwzKBPz4nsZ8l6n2HT/MPFlm77ggw8qSkMCQW6D7IF3MLjDwZIG9lKHAoPiMO9v/wG9V
        nMVkkjK41fDD9D0PEGmmFAsZYnGBIR3iw69g89RuqFPcRnQnESeiMqPwrx4DOvHaWJTXJBIy
        RGBQlZcSf6C0HMboUy4MRX4d47x0Ymj4i+ZeZxBWXHjL38bGIMfl30sbLDBcHqlzbAYCQ8Jp
        nTASaUVMNEcyBO4TNrS1E383C9fCRVDe/zSi6GllMNu2bVNfkxTt6tWr4hEEQRC5D+7TBrTl
        F2mqZxrrisJFysP/dN6okEKYTvaOCzKsLAkJDLkFug/SxRICQxbYS3oFBvl7XF0/Bm3LO4BV
        CQvWKFavH+Yfe4aYrL74WS8wKBH1aD8Ce9ZGUSsWBUs1w+AF+7Cuf6kkAzo9geH6OKMEBu7d
        CjS1Eo+XVsGUe5k1tjl8PjYY5XSSQaoaYwOPxv5YdvaVgZnU5fh3VBmDBYZkx2YkMPzjj2Ja
        gcELE26aQWAQPDKWNtIm2GQLd8EemlWMZty4cerrIrbhw4eL71iexMRE/O///i+Cg4OpUaNG
        LVl78eKF+KQwAeVrLG1kpV1QFe6yh4wOwkLjQo6gkeVga2UFqwyaTCy7JpGl/X6yZlMSQ/4x
        LEDk2bNnad5DObkJc39cXMYhxfKgkShnm0b/pGwydUU3RiJL+/1kzQYlh/xjUPhNREREmuef
        n1poaKjYG+mR/fdBnsASAkMW2EupBIbE97i0ahh8SonCBmMHz+ZDseLca2QyDZ/pZKXAEP/m
        DOZ1qw4XKQuHCh0wadttqMtsynFldFmLCAyJtyejkuZ4wYPhmjmM7US8OzUFPh6aiVOn8Re8
        WAN//HXtU9rhIFpym8AAKB7OQA1NeIhzV+wzoQJmfuc///kPPDw8VH3YuHFjldGfVbRo0UI9
        JqhRo0YtjXbixAnxaWEsCjycUUPM/cPAueu+VOGFRH7EEuMie/M1LVy4MO2/zwWtQ4cO4q/Q
        T3bm93j06JGqylban5F/GsMwuHjxotgr+si7ecuyFIsIDJa3l1IKDFz4SjTVbnyzcK4zGvuf
        xmSvx0rWCAw/8HDTAPzkxIKRuKH+mEN4mUxSsaDAcHUMymmOZxzRdb/5kupxUfexfVxrlC3I
        /y7x3DWNkRVF8+kX0lHrc5/AAPk5+BcXB4vEE8OD0u97IjWLFi1S9V+JEiXw5csX8dWsYd68
        eahUqRIqVqxIjRo1aslagwYN8PTpU/FpYTzyc/4oLhomEs/hoOmBELDEuOASExAfF6fakdff
        orDLV+0a7rM6DLFpHqPT4uORaEBs8v/8z/+gSpUqad5DObkJc/+qVavEX5EOXCIS4tPonxQt
        apevOkTCZzXCYtM+JqnFI96AzhXWRE2aNEnz/PNTEzaf/s//+T9ir+gnO++DPIOFBAZL20up
        QyTkiLi+CePbe8FJ5bEi2KFuqOE3A/uCo5Atl9TiAgMXjSszGsBFMHhZFzRbcA+pC0lYUGC4
        OwVVNMfzP7DS5Nsm/cD0kEdcw4bRrVBGE2uoaYw9av1xRY9in/sEhm9n/MVqHEKToWZgSAZe
        GoQu586dUynTNjY2Kjc4giCIvME3nPFPCnMsIKuJwBCaHYjsHBcUe25JKAdDboHug3SxkMBg
        aXtJf5JHBb7e341pXX+Cm1gmmJE4o3Knydh++3PW2myWFRg4ROzrLpZ15A2r+gvxPE0ZxXIC
        A/d+NZprcjDwTfZzIAye37hvCHv9xeALEv/6JAI7lIGtGHcjNMaqGqbeSescc5nAEHcDk2uU
        RfuO3upSJ8L1bLEGEWZ7WhkeT2ZUyyHxZK9evYKTk5Pqmuzbt098lSAIIvcTd2MyapRtj47e
        Yv1vxgYt1kTQYtZCGBwnb1QzPE7eULJ3XJBhZUlIYMgt0H2QLpYQGCxuLwmnrU9g0MDh25Mj
        mNunDoqKoRMM64DybcZg/dX3vMWVBVhUYFA8wLTq4sRSQIb6i0L1uGlYTmCA/CICSmp+IN+k
        FTDmqmH1HuR3/0TdXzfiszGDgovElekN4Kwx8AtIUHrkv+KbuuQmgSEB9wPrwKPDJry+OQkV
        xf5nXbrjYGp3FBPJu/Fk/+///T9UrlxZdT6TJ08WXyUIgsgDJNxHYB0PdNj0GjcnVYRU9exl
        4dL9YBreioQ5yM44eYPJ9nFBhpUlIYEht0D3QbqYXWDICnvJEIEhidhXZ7HMvylK2ope9owd
        SvkMw6oLby2bANKSAgMXvgrNtN4D1mi7KVJ8JyUpBIbSI3HZXAIDYnCwhytY8bMFJcmx+Qq8
        yMgtQfESq3zc0WTZ62SiSOLdqWjUaz++if9PE+UrrGwm3NDq77Ruu1F8Q5fcIzAkBM9F/SKN
        segp32lxR9HbjVV/tqQMRupTgkxBqYAiMVGV+NBsTaGAMhufqBzH4bffflP1V9u2baFU5qfg
        NoIg8jYJCJ5bH0UaL4J6eugNN3HukZQZqXejgMgsSigUacx3mWr8/Gu2yTInjAsyrCwJCQy5
        BboP0sXMAkNW2UvGCAwaEt7/i3Wj26C8g5g3kLGGR4OBWHzqpWVEX0sKDIons1BLzKIpfHjF
        SfryH8TjwrCSSQZ0iQBc1HMdjBcYgO8nBmiTDKka44C6M2/p71AuGlen1YWjUxusD09+Oybe
        mYwqRf2wLzK925TDuxVNtJmTbTvuEF/XJZcIDHF3MLO2G7xn3FXvbHARWNvSRhRPZPCe81Qn
        hCQa/0zww+zb5ruJcjuzZ89WXYfy5cvj27d0ZSmCIIhcRdydmajt5o0Zd9X73lzEWrS0EXdJ
        ZN6YIyyyNET/gwl+s0HTQ94nZ4wLMqwsCQkMuQW6D9LFnAJDFtpLpggMGhSf72D7H7+hirNU
        FBpkcPfuhdmHH+ObOQeIPAjDdQWGseb0YPi4Bi2sxUmFb5KS/XHsa4qzV3xE0OzW8BCTUQiN
        LdQPJzR+evGRiNQp/JB4TacqBOuOAac0B6aD4gkWNigoXmR1Y1hneAdsw/0vOhMdT9ybc1jc
        vTIcWBm8Rl1GypoTgsBQSWYD75n31ANID1GbfoG16rvUyT1SI0fQcE8dUWUYLugdZ3JcDNAR
        YNLx8BBIODtYR2Aoj7HXDbukyq+PcfHcHYRrIki4LzgzrCKca03Dba0fjQKPZiaVnbJts16c
        XDh8OROAmvUD8YAWkCqEkm/CNbC3t8fz58/FVwnCEigQ/SYY1y8F4d9bj/EhlpYRhDlR4uvj
        izh3J5xfrqrhvpzBsIrOqDXtdpKbpeIRZtaQqecexhZt1osLWmEuCaiJ+oEP+NmMyDvk5HFB
        hpUlIYEht0D3QbqYKDBkt72UGYFBgzL6EQ4E9kCtwpocOVK4Vu+Cabvv46s5nK11K2mo0gVc
        Nuk5rycHQzBm/KTJwSA0Fm4NJ2D/wy+I/f4B948uxoDahWFVpBF8mxfXGtAFZFUw5tJHfLq3
        FUMb/YaVr5N+qW7JI5UiNPeZjiKkn4TghWjsLLqqaBsD1q4YqtZvgfa//oJmP5eCk0roYGBd
        aSTOR6e+FVUCg7QAGNuqCDgZoSenRBQO9yqqCstgnVthzZu0jorFAT8nbd8wjn7QX0EzBrs6
        Cw8I9bGsW18cT0fdiD/cE86qxCJ8Y93Q55gBOSdiL2NsRWswDAtn71E4/DwUZyY3gKtTfcy9
        n/zv5ZdGaLOjMo6Cl4cCXy5PR6MS9TDrngHflQ8QBAVBWBD66OTJk+KrBGFuEhF2ehZ8q7uJ
        yYSExj/XbIuj/oAVuPKJQnKIzBN7eSwqWjNqYX7UYTwPPYPJDVzhVH8ukk8PclwaoakawMCR
        X1CFK77g8vRGKFFvFmh6yFvk7HFBhpUlIYEht2C5+yDx/WWs+cMfffsOwZR1V/BBrzGWiPeX
        1+AP/77oO2QK1l35oNduM/QzlV9uY3vgCPTr0Qv+k//C+bcmPkRMERhygL1kDoFBy48XOLlo
        IBp68L9JeEYzEjhV7ICJu9PaHDeCuP3o6qBxHmDh2ud4uhvz+khbYODN77BNHbSxd6kbC6ca
        Q7EvNA6vlzQUVZ6kxkiKoN2aZ0mKR+Ib7PRLngiQdW2MaRc/GiAycPhy8Q/UTSUypGwMbMv3
        xLYXaessGoFBOJaxLoW2fx5ASLTOIp6LwYO/O8NTxk+6stLotuN1muemeLMZHd11zoV1R8dN
        r9N0H1GE8ccW0jlW4oHue8LT/s2KN9jcqYhOzgkJPLrvxfsM7AzFo5mooQ1nUTdG6gHf7Wmc
        f+xJDCiqOR/+xnRygb1NKXTb9daA65D3iYmJUYVECP0zd+5c8VWCMDeJeLGhUzLvr+SNgU25
        ntj5KhMhUgTBP9WTdmGSxpbUwxfbX6d+4seeHICimjmfXwA5udjDplQ37HpLs0PeIqePCxIY
        LAkJDLkFC90HibcxpYqV2iBV3dPW+DkwOE0bIPH2FFQRKxkIjbH+GYHBaRxp6GfKr2NSZdEY
        VjVGZQvOvvldPMAITBAYcoK9ZFaBQUP8W1xcPRwtyhQEy9/bsurTxTdMIQGhmzujmE56Aoln
        L+x7Z/x6VI/AwMNF4OTImnBMITIwrCOq9d+ER+J4UITMgbcmRk9437Y8uq1/pApRUL7chqFt
        G6FacTvVj9b9HNWxEgeUrOWD/usfZ3DBOMQ83Ibh9d11dvt0Pkfqihq9V+BGOvkVdAUGdRN2
        C4ugUr0WaPtLS9Qr78J/NouC5X7FrPPvU5yPEu/2j0EHnzoop4l90WmM1AmlvX3QYfwhfOA4
        fDw6CR1b1kVZp7SOdUbZ2j5o22UhrsmF+20R/Nr5oHZpJ0hS/jZGBpfydeDz62Qc01cSI+YE
        +mtdWfjPty4D3zUPU4WIqEnA7anVYS1+D2PnhT47XljAxTH3oVQq0a5dO1W/dOnSRZXkkSAs
        geLZEjS2Z2FXygcjlu3FmWv3cP/6KWz6oyMqFNQ8SxnY15+PENIYiEwQc6K/jucgA+syvljz
        UI/LXcJtTK2uWfwxsPPqgx16BHsid5OzxwUJDJaEBIbcgiUFBh0P9YwEBp2NkPQFBgM+88cR
        9NbddFU13nj3no2Q9I3A1JjiwZAD7CWLCAwa5BG4vmk8fuu2RHzBUJR4uW0Y2rdsitpe7rBh
        U25+8fayjTu8vJuiVcdJ+u3RFOgXGFTE4+3F9Zge0Ad+fr3hP3Ex9t2OSNHBcrw5ORdDevSE
        /6SVOB2qZ5IyB1ws3l7ZiYWThmNgTz906zsEE+Zvxbln0XpCHpJQhu7A+OlHEfb9C0Jvn8We
        NQvw55gh6Ne9C3y79MCAEdOw6tBdfMyFC/rYJ/sR6N8LvYfPwb7gqPQfRPJQHJk5CD0HTcPO
        4GiavEWmTp2qupGqVauG2FjLjOFHjx7h/Pnz4v+I/Ek8LgaUgccvKxGcKlsth8hLE1FLIzKw
        xTDgpAWfp0Q+IBZP9gfCv1dvDJ+zD8FR6T/x5aFHMHNQTwyathPBaYQaEnkFGhcEkV+Rh13A
        yvED0KPHQEz86xLe67V75Ai7sBLjB/RAj4ET8del93qT/Rn2mRw+X1+PSQO7wa/faMzbsgMT
        6xcEY9UUK94Z+VwxMQdDdttLFhUYchgZCAwEkfc5dOiQyqBzdXXF27dvxVfNz6hRozBu3Djx
        f0S+JPEqxjXug4Nf9E1VctyZUk301JLCa8JNvRM6QRAEQRBE7iQBZwYXBZuyQo0hmCgwZDck
        MBBEPiEkJAR2dnZgWRZBQUHiq+YnISEBbm5u2LBhg/gKkS+Ju4P9h5+nGxKmeBSImqo4QRZF
        B581KbkOQRAEQRBEjkXxGLNqycAW6o0jqTw6M4AEhhwPCQxEviUqKgqlS5dWeS+sWrVKfNUy
        bN68WfU9V65cEV8hCD382IVOtkKYhBSV/7hLHgwEQRAEQeQhOESdGoxSEhkqjLqcVBrXUEhg
        yPGQwEDkSxQKBVq0aKEy+gcMGID//ve/4jvm5+nTp3ByclJ916dPn8RXcyIc4j4+xfVTu/DX
        nAnw92uNupW80HNXpBh7xiHy9joM86kAF2s7ePgE4so31RuEOfm2Fe2FxLlsYfQ9RjkYCIIg
        ch8c5NHheHr3Oi5fPI8Ld9+RN1pmUUQgmO/Lc+cu4IH+2orpw8Xiw5PbuHrtLp6FfyMBP5tI
        DN2GLiVlsKs+DhdNyetCAkOOhwQGIl8yfvx4lcFfp04dVfiCJYiOjlZ5RgghGMJ3OTo6WlTI
        yDxyPDuzDXv3/Y1B1W1VGYEZ6+ZYFS48/BUI2z8QFe2kkMkk6mzBjB3abf6i/lPCbCReH4cK
        UqE00FCcI32BIAgilyDHh5t7sOB3XzT0KgQbqT08fmqOzgNG4s+td2FCMT5CSyIeL2oMR1V+
        Imv8sjlKfN1AEt7g9LxeqFPMBoxYGUCo1OZWvRMmbA9GjDky+BEG8B3PDk5G82J2KO4zDeci
        MkrRrwcSGHI8JDAQ+Y7du3erJxe+DRs2DHPnzjVbmz59On7//XfUq1dPlddB8z1CE8SM3IEc
        QcNLQsKfs6z2XDxTcoi6OBbeFX/FwssRSPi8Eb/wD/YCBWRovDxM/BvCPCTi9qRKkDIOaLr8
        ZYbVcQiCIIjshkPk3U0Y0bQEbBkGrFM1+AXuxs33Rjt+E3pIfLwIjR015fOMExgU745hlLcz
        WEaCwg1GYP2FR3gT9hJ3ji5Gr2oO/OsFUbHnJjyOF/+AsAwxZzCmhgc8a3fD9L0PkamCNCQw
        5HhIYCDyFQ8ePIC1tbXW6M/K1q9fP/Esshhj3QqVL7Ggnow/ZykqT76DhLCd6Nl0MA6Fq/+W
        C1+Jplb8b2LdMeCkmbw/FJ9xa9NEjN34WHwhO1DiR/gj3Hv6OR1X1hj8M3ckll0Is4i7Kxd1
        BL2LSWBbawbumvMLjO1fLhYfXzzE7atXcP3eE7yJtIyXT/4gDu/u3cTLb/pWU5YdUwRBWBB+
        fj0/syU8ZLzxy8hQok0gzoRltlo+kQx5CBY2clB7Tqqa4QIDF3EUgypY8X/LwKHBHNxL4RXI
        fTyCvqWkYPhrV6r7LrwxMfKCMAD5ezx/GZVukmuDIYEhx0MCA5Fv+PLlC0qUKKE1+LO6zZ8/
        XzyTrMR4t0Lu0wa0FTwUJJ4Yfi4Ea7p3wfKQJGk/ercvnPjPY+w7YOvXzPsV/gjZjmGNa6Pz
        gkuIyLbJPR4PV/0iLhILouqwY/ig56dxUbewrPNP8O69Ete/mNPHIA43JleDtUM9zLlvvq0U
        Y/o34V0QVge0QuXC1klupHxjJPYo4f0bJmy9C7P+5DzND7w8tRgDG3jAWloe467rj/a13Jgi
        CMJifL+PVR1LqssKM3aoPGgfXlNQv5mRI2RhIzjozEcGCwyK51jp4wxWmMOsa2N2SFoXh8On
        HZ3hygrXsCDqBN7jVwNEjifxBpb16YaegWfEF3IHiTeWoU+3ngg8Eym+knchgYHIF/znP/9B
        kyZNdCaorG9Hjx4VzybrMMWt8NueLnDmJ3O2cA8smuuL7hte6bjqx+J4P3d+wmZg03wV3mVK
        X0jAyz2DUb1YLYw69cE8qraJcB83o722n/gm9cLEW+msFBXvcSygOlzKdMTSm1H8EiXz/Lj+
        B2oULIZOm1+ZqS+M6V8F3p0Yh3puYn4NfY2RoqhPIC59NscvzqNw3/D40Gz08nZXGx5Cv2Ug
        MKiwwJgiCMIycNFXMbOhi8p4LcDYoNLQE/hI2qDZkYcsREMHCRyr/oQyUvF5atBaRok369rA
        RRAOCrBw6bwDeqet+HMYWkKi+mzGri7mPc7O1QhB5A1IYCDyBR8+fECVKlWytb18+VI8myzC
        JLfCOJzorxYQ7Ko1gE+3DXiru2iSB2G4pzARy1Bn/vNM5AiIw8NV7VDcpjwGHPmQ7bkG5BeG
        oYRE009Cs0KLNR/TN/KU4TjQpwysnLwx5nREpn4D9+kEBldwRe2pV6DXk94ojOlfDlHnR6Oq
        qjSmbh/oa/zY+GkMzkeSCZwMxVfc3/0nfKu7Qppst41vhggMAmYcUwRBWIjYe1jkU0gtLvDG
        q1vLVXhKURHmh1/DLGjoAIlTMyy9uAzNhNBMVZ8bsJaJvYjhZdSiQQHGEZ12pLdjHI+z/sVV
        eaeE61nYby++0PRGEJmCBAaCyJOY6FYov4QRpYRJmQFbsB7mpXApTLw9CZWEXQRZNfx531SV
        PxGhWzrDQ2qDnyZdyxGZtQWBwSOZwCBDo6VvMjbwflzHHzVswTp4Y8qVb6btOscFY4mPB6oM
        OY4IsyxqjOzfmHMYVlaqilG19miEgbO24PTNJ3j9LgwvHlzE7vmDUL+ILLlnAyOBR+9D+neE
        8iGKJ1swacpanLzzHC9ub0P/ikLcr9hfhgoMAuYYUwRBWAbuM074l9d6J7Huv2HbO5ICzQ+/
        hlnQEA4SZzRf/gzy96uMEBg4RGzuoArlVB0va4IVGbhbRu/qLIaSFgBj2xhLQ+maEkRmIIGB
        IPIgproVJt6ZjMrC8YwUXqP/RfJ8SAo8neMNGf9ZkrKjcdVAeykl369NQU07BtJyATifQ+p2
        KR5MR3WZpp/UfdV2o2ExcnE3J6O6FQOJhy92hBm5KFG8xs7uFVChxy68NpNXpnH9q8TrFc1g
        x9ry57AewXpqdSk/ncPkuupYVk0fMbJqmHrPxEGQ5+HwbkUT1b2i6i9jBAaeTI0pgiAsBIcP
        u7uiqEaMZp3Q8u/X5GlkAeSPFqABv4Zxbr4cz/i5kTNGYODC8ZePutS2cLzEcziCMvAwUTyd
        A2/NGoCxQr0FL+i6EkQmIIGBIPIaJrsVJgkIjGNrrEu5K6MMw4qm1vykLUHxwWdNSoTERf+D
        gAoyMIwDWq99l2N2Z7mPf8NH2098Ywuh3wlDc/pH4Vg/D0iEOM+Wq/HCUKFAGY7Dg6uiXMd1
        eKr3qzjE/0iR9jodjO5f5XPMr2ONoh034VUG5819OoK+nro5GqTwmngLJDGkTcLR3mL8L9+M
        FBhMHlMEQVgM7ssR9PEQ3e4LMJB6jcN1Kv1ifuSPML8Bv4Zx9sEKQV3gMUZg4L5sRruCSSF/
        Vs1WIjyjyTDuILo7a/6GgbXParzPKQsUgsiFkMBAEHmKTLgVagUEFoV7HkaM+LIG7rM4abOu
        6HFI2BqX48Ob9+o3DeI7gkZ5qVxL2aJ9cTTlF2Qn8UfQS7u44Ju0Mv64a7hBqHg4EzWEChSs
        M9qsMyC0QhmOI0Oqo3yH1Xikt1Q6h+jrM9Bu0D7x/xlhfP9yH9eiVZHWWJss0YY+OLxb2zpZ
        2I1Vy7X4RIuwNJGfH5IUdmO0wGDCmCIIwoLIcW/aT0mJWxlbNFtB96X5kePR/Aaw59cwPiue
        a5MTGyMwJJwcAHeNuMuvZ1z7HMu4BHDiLUysKBX/hp9DnXvgsOHaPkEQKSCBgSDyEJlxK0wS
        ENzR99gP8dUkYg/3VJVyYgq2w+YvSnw+PR69Zt0U380YRchc1FElEmRRbOCpFOEX2UziDYyv
        kLS4KGDVHKuN2b5QvsCCeuo8BRIP3riPSudvE99g34CKsHdvgoB5S7F0acq2GAtmT8OoHg1R
        wq4Quh/8Jv5h+pjSv4qHq+E/Kwipr3bapNwZktWZjxe5aoUdjyP9isPJsRA6bf5iUQ8aedBw
        eGZCYDBqTBEEYVG4yP3oVpjVPvsYxw7YQuqq2ZE/mo8G9vwaxmclnut4bhm+llHg2Vy1J6b6
        WCkqGuJpp3yNJQ1l4t/wTVYLs6iaBEGYDAkMBJFXyKRbYcx+PzizBcC6dMOBVLvfibg3tSqk
        /Oew7p2xcP1IdOizCS8NtZm4SBzoIVSn4M+DdUPvIzlsa0D5BksbJS0uGKfuOGRUDIgCjwJr
        qhc1jDVqz3ms3XlJRvxTbOpaBlY6XgDpNda9N44Ykqciq/o38S6mVEkSYqx8VuNDrlpjx2N/
        V3veaLdCy7WfLCswXBqROYHB0DFFEISF4fB+bSsU1D63GTj+uk1VaSA+7DI2Bw7Fb42qoaxH
        IbgULoEKtVpjwIwduPOV/BuMQv4Q8+rbq9YwK3XVBR7D1zIJODWgsE6+IBkaLjEkT0YUNv1i
        Lf4N39jCGHCK4l8IwlRIYCCIPEFm3QrjcHpgUX5S5hdOnXYgdQVCBYKn/yQaO7Yo77cej4yw
        YZWhS9FYLIPI2LbFhsyWH5BH483D5/iUlsWljEHY/X9x4fJDRBi8PojFHt+C2vwC0vJjYaw9
        KL8YgJKiQSnxHIbzqUIf5Dg31CN1CUO9jUXR/icM8i4we//qQ/kSC+tphBgWxfzPZux6mgw5
        ot88xPO0Lxxiwu7j3wuX8dDwC2ckuUlgMGRMEQRhcbgIrG2VlDRQmANbLDyLTcMbwcM6yaMr
        eWMgK9IYf5z9SGEUBiHHw3n11WuYVS9SiamGr2UisamtjlAgHLtJ/8ZKErHY2Unn7xhrtNti
        mPcgQRCpIYGBIPIAmXcrzBgu+gH2LV+GzedDjQxvUCB4RlLsquynGXiYln2ZJhwSvr7EnXP7
        sX7RVAzv1QGNq5eCizULaZUpSJ4m4TtCdo9Fy9L2YFXfxcKh5gRcMMi1XI6g4Z5iHWz+HBsu
        wWtjV4VfN6OdaOQLux89D2XV4iQz/Wskivv4s6ooMDBO6LxL/3jiEr7i5Z1z2L9+EaYO74UO
        jaujlIs1WGkVTEmR3+J7yG6MbVka9qy6/1iHmphwIcoCAkDuEhiyb0wRBKElZi98nXSEBN74
        dHCwgZNXe4xZeQQ3X0bg8/sXuH18JQIaF0vK08A3xq4qRpz+bNFnTV5A/nAu6gtrmBar0kxq
        a/BaRvkaixvohDowBdF1vyHuiPHY1yVpk6EAP0c0X21MjimCIHQhgYEgcjtmcSu0IIoHmFZN
        M+EzcO5+yGCBgos8iem9B2LEqCH4tbKjjtujBKV+vwRt5anEtzgUUBNO2sROYuMXgg0Whxqw
        g5RUQUM4x4Kddxucl0CLkCTKSxM+wMK12wFkiTmYif41mpjd8HUURYDCPXAwWnw9JVwkTk7v
        jYEjRmHIr5XhqHNdJKV+x6WkC4e3hwJQ0ykptlndGFg3WAzzlyLPZQJDdo0pgiC0JF4bi/La
        cs+CAFoVvVb8i4i0bmn5K+zsXiqZp5qkmB/2RpDEoBd+DTO3nrCGaYHVekrmGLyWUTzFHG9d
        gcEZvY4YIjDEYXdnGx2BQYZGS9+I7xEEYSwkMBBEFqH4/h5Pbl7BjYfvEGM2w8lcboWWQ/l8
        Hmpr6kvzk3aNmY9SnachKJ7MTqpTzRZB/5OivzgXgWP+XrCRFUKtHpOxcO4geGsNVhbuA04Z
        5MYfvbkdrFWLQgk8RwQliRcGE4nNvyQtUNgiA6A5RUtirv41hLjTg1BMEAsYGapMvmVYeITi
        CWZrF3wsivQ/yS/lBDhEHPOHl40MhWr1wOSFczHI20krIrHuA2D+ENhcJjBk05giCCKJ6K0d
        YKMjGFg1T7+EIRd1Gv5lNOUs+cY/LytNumXCnJIfkCN4bj3VGqbF6tRrGA2GezA8x7zaOgID
        64a+xw2ZSL5jWwfd0AorNF35TnyPIAhjIYGBICwM9y0Y20b7wNPRBWVrNUCdCm5wLtMC4w+G
        8uZO5jCbW6HF4PB1S3vYaRZnjC06bDNtDzbx+jhUEHeRGGdf7FF9TDzuz28M1yLNMP1ChHpx
        wn3AXz5W4m8WPB0uG7SwSzg9EEVUO+0y1J77zIS4WTkuDCuhDbMoIK2IibdMMSqNwXz9mzHR
        ONyriEoAYIt2x35D8zwkXsc4TYUOxhm+6guH+Pvz0di1CJpNv4AI9YXDh798YCX2n+DpcNns
        K/LcJjBkx5giCCIJJZ7Pq6NTlYCFc6+jGYirSrxZ5aOTFJJ/npW2xPMs95MQPAd1C/JrmJar
        8TIdZdxwgSEMy5uY4sEQiY1tUuRuyPL1EkHkHUhgIAgLwn09j4neTpC4NMS0S2JZPC4a12c2
        hJPUHa1XPBR3c03AnG6FFkOOy7+XSjKQ2OLw/8eUVRa/YFvaSIxtZWDXZj0+chyizo1A5RKt
        sTxYpxd161kz1vD5O8IgQ1Jx/09UEzwBGBu032qKka4bZqH+7lbrLGvEmq9/M0YZugLNVGVM
        3dBuw1uDBRjlm6VoJFOHVTB2bbD+Iwcu6hxGVC6B1suDdcZ/Im5NrKiqVKIKkfD5G+b3Ks5t
        AkN2jCmCIJJQ4P6f1XQEBinKj72eYdlDoexze3udvA2y2pj7zOwxX7mbhGDMqVuQXx+1xF/p
        qQs8hq9lvmNHx+QJOX33GLDKSlFJqgDrij7HzO5CRxD5BhIYCMJSKMOwpaM7WKYgmi5PkQcg
        8SECa1mBkVXAsDOmJLMzs1uhpeC+YkMb66TJXloZf6RI8GcQ/Ods7SAYhvxnMFaqslOJEQfQ
        26smxgVFJ+s/5dvlaGIlLuxk1TH9QfoLFw1cxN/wEfqKLQb/s6YsLDh8XtdKuwMvLETLjbma
        cf3tzGCu/s0ILhLH+gk76SwKd9iENwavkzl83doB9qIwZCUkz0yMwIHeXqg5LgjRyS8cljfh
        7wnVb5Gh+vQHese16eQ2gSEbxhRBEDoo8GhmDR2BQYafAw0oGSvspDfWNViLYrBJ80peJQEP
        ZtdFQYkLWv71MsP+NHwtI8clXdHd0Gd9slxGfJNVxZ/3zT8DEUR+gQQGgrAIHCIP9VLFq7PO
        XbAnVTI8Du9W+8CWYSCrNB7XjHRjMLtboaVQPEJgTd1JuzbmPTdhF+f7IfRwFfMqyGoiMPg1
        tvt6odniEH45oQuHL5vbaV1TJWVG4V9DN/Tjj6CnM8N/fg3MMLEMQ9xe32S10u277DPdQ8UQ
        zNW/GfDtwgh4yRhIS/XBQaPcCr7jUA9XMa+CDDUDg/F6uy+8mi1GSIrrwn3ZjHaCh4RwrKQM
        Rhl84YwhtwkM2TCmCILQQYmw5U2SCQzec58ZIH7KcTGgZJKhyzijx+HMBkXmIeIPo4dQmYOR
        QGZlBasMmwwSneegRKbzXsHamB2iuSIcIta0EPMpCU0QhEIyvl7yiwgomZQ3g7H/DbssFW1I
        EPkAEhgIwhIoX2BRAyE5GwPbNhuQVri64tlcddJC1gWddxpRxsoiboUWQn4Fo3STXckaYonR
        9R/5tcg//vAQjTVphTHYt64jKrRKS1yJwf5uLqJBy6LY4DO8SWkgmlwBVq2wztD8AilION4X
        bjoVE6xarsUni1qx5unf9OC+nsaQ8jKwDrUx7fp38VUDif8H/h7i+UkrYMy+dehYoRVWpzFu
        Y/Z3g4vYd2yxwThj1FpcjqCR5WCbbEGadpNJBBEjxQJVX7MpiSH/mLbraC6BIcvHFEEQyYg/
        2lv7bBK8iCpOvGWAF5ESz+fr5G4gD4bkxO9BZxtRUM5sk9XAzEdJc0rincmorK36waLIoDMZ
        JyT+tg0ddM5H5j0XzzJUJQiC0AcJDARhAdQVD4TJSopKk2+nvRhJOIvBRYVdeQb27TYbaDRY
        yq3QQsjPY6jGwBSarBGWvTXWAE7EtbHlxdh8CYr+0gutyvpgRVp5J+JPY1Ax0dOBdUX3g0YY
        xMrXWNKQN6Td+sKgpNNpkHBmkJgoUt2smq7AO4sKDObo33RQvsV23+K8MV4avfa+Mzjvggbd
        8m6Sor+gV6uy8FmRVkhPPE4PKqYVhly7H4RxUkaKZIjmamwRDDqdzQJDVo8pgiCSIYTdNdaE
        3fHztWOXvQY8nzi8X908KbyJcjAkR/4v5nZuj3bt2hnWWlRDIe1zUIIiNVonvddxJHbrznsJ
        /LxYImleNOSZqXgUiJraakxSVBh/g0LRCCITkMBAEGaHQ/iqZrASXPQYa7TZ+FV8PQXKUCys
        p3ZvZ1174nCs+Hp6WMyt0EKkcDssIKuHhS+NXGQpgjH9JzEMgGFh71AIdWYFpwiNUCO/Mhpl
        RaOOcfgV274aY4n9wO7OdpBVnow7Jq4sEs76q8s4ir/XyiKJCnUwR//q5TtuzqgLB2kRtF0d
        YrgniBYFgqf/JO7gMWDtHVCoziwEp33hMLqs+DsYB/y67avR4QtcYgLi4+IQl26Lwi5fdYiE
        z+owxKZ5jE6Lj0eiid1pNoEhq8cUQRDJUYQkC0WTlh+HjG9nMTGx+DeSkgG4aImor3yCcZsl
        8Tg/LCk8hS3cDycymMC+7+0CR81aSVqBf17TxSKIzEACA5Fn4OI+4un1U9j11xxM8PdD67qV
        4NVzFyLFxTgXeRvrhvmggos17Dx8EHjFUgF2CTje1029G5vuDmgMtv8q1rg3NO7fgm6FFiHx
        NiZVEis6qL6zFmY9Nu47laGLUF+sQiAYqtIKI3Hph/hmMhR4ME2T7ZuBDW+IpVerPDXqmFmb
        ZqsQbqIBl3Cin84uC38Ov27nr7IFMUP/pk0iQrd0hofMGQ0Db5j2G5ShWFRfph7ffGP4RdvI
        tC8cFA+mqSt4CMfZ+OBv4y6cEeS+HAxZPqYIgkiBEs8X1oeNxgAV8gBlOHcm4sb4ClrPu1LD
        L5og0hIajPXGTLw7BVU16wapVwblfRNxfZzmWjGwrjMPTyy8NCKIvA4JDESeQf7sDLbt3Ye/
        B1WHreg90HxVuMqIUITtx8CKdpDKNDv6DOzabcYXS1gY3DusbGolTmyVMVnvdng8jvR0Vhtg
        bCH0O2GAK7Yl3QotQcqa1KqdAWMMLQ4f1rRUX09VPxVGl916DEPlS5VHiKo/GRnqL0xRuSND
        FHgy2xuu3Q6avBCMP+AHB825FmBRdLABsZ+ZIdP9mxYcIo4PQSVbe9Qcd97ke4T7sAYtbTXC
        EIvCXXbrCQNS4uXCetoSpLL6CxFqsWGZ+wSGLB9TBEGkgvt6AD1UIY3CfShD1an30neh55/N
        K5uqK/wwNnUwzyzCb/7F6HBP7gO2/KrJxyTDT9OD9YeUKh5jVi1xHmXd0W2fWFKcIAiTIYGB
        yHPIg4ajpLCwF2MeuaiLGOtdEb8uvIyIhM/Y+IudatKXNV6OMB1Dhvt8BrMH9kXfvqa1gbPP
        qJM56pY7kvELC71Z/RNwakBhcQK0xq870t7dzQzZnoNB15tDaPzkPdComPYo7PjNUS0a8Man
        1c8zEaxnVcd9+BstNN4dJlaCiNrcAVXGXDMx9jJlSUEZas97bnTeAuPIbP+mhMOX8+NRy9EO
        lf2P4UMmTj5qx29al1PG6mfM1H/h8HcL0ZOH77MaMx7qXwhmmtxepjIrxhRBEKlR4vXaNkmJ
        aIt2x/501FfFk3moY83PR4wMXqOCjMwpQ6TElLVM4uMFqC9WJpKWH41/9ewcyG9NQiWpcBwL
        5xZ/WVDgJoj8AwkMRB5DiZcL6qnc5KVCLH1CGHb2bIrBh8LVRgsXLnoXsHAfcDLZTqDy3Ub4
        VSqP8uVNa5X8NuKdMDFpqhEIE6GscTpJ9xJwol8hrcBgCeM/+wUGflG2pGFSJm2GP4dNRpzD
        jyPoXUjcNWIc0W5jhF6jMHJHJ+1Or7SCITGyacApoTTZ6hQ8IGol/VbWDX2OWdopNpP9mwwO
        kZenop6zDSr024e3Bln5Srw/PhuLz0eluC4/cKS3ZmwzcGy3UX/egMgd6OQgCkNm8cBIj9wm
        MGTHmCIIIk2U77DbrwSkwjzDSOHZ51Daz7WEx1jRUijPy6Cg91RcI3Uh05i2lpHj0eKmcBZE
        IdYZrf5+lVq8lj/FsuZOqmslKdYJW15ZTt4miPwECQxE3oL7hA1tBQ8FCTyHn0PImu7oslwn
        QV30bviqkiTao8NW4xPJGUTiTUzw0ggM6WX11wmRYGzw2y5DsjwaR/YLDHx3XBuDctqSUTLU
        mPnI4B3qhPNDteUpWVc/7NN7+rE4qjVoJSgx9LwoHsXh4ZEDuPfNkqakhgScGVxUPIcCYKxb
        YE0WZOPLTP8mweFr0BTUdbaFV9+9eGOQLazE56BpaFikDuY8TfGNQhZvTXUL1hV++i8cYo/2
        1obxSEoMxXlR9Yt7eAQH7n0z8z2ahQJD0PBkAsNYkwSG7BlTBEHoIfY+lrYqohYZWEf8PHw/
        XuhM3YkRQZjfrgRkDAuH6sNwNJy2w82ByWsZLgLHh1WBHX+9GPtaGHn0tXZjSfn1Flb6loUV
        w0BWvA0W3zb3fEMQ+RcSGIi8xbc96OLM8BN/YfRYNBe+3Tfglc78Hnu8H9x5Y4axaY5Vlqr1
        pniKOd6aEIna6YRIxGLXb7ZqgYE/3/4nM+PanjY5QWBAnE7pyAIMnHsc5s1+QxCSZHmJiZdY
        uHTdi2jxnVTIL+P30hqD1g09DwvhJhw+HhuM2r+swjNLbopr4Bcyf/uIuTf43ymrMw96L705
        Mbl/NSjx8ew4eDtJYF+tP5bs2I3du/W0XTuxbfM6rFwwBf7tqsJVysCq3gK8SPE7E2+Mh5co
        erAuXbFX/4XD5d9Li9m+Wbj1PAzVlft4DINr/4JVZr9wWSgwnPNHcY3AICmNkZdNyEqeXWOK
        IAj9yF/h0LhmKKEKyePvS1cv1Gv5C1o3qYZi/GuMdTE0HLoJ97NE2M4fZGotw33BlUWd4VWQ
        vzZsQRSv3hgtW9ZFGX7OYySOqOg7B/+EZ8UigSDyDyQwEHmKuBP91QKCXTU08OmGDcm8B+QI
        Gu6pMmZkdeZbcKEegx0d1Xke0k3yyH3AXxrjQfaTSTkDMiJHCAy8yXiif9IurMx7tmEZmhWP
        kkqDMY7ouF2/x4kydCHqaWpYyxpjeZgCn89NQIMafXHgvSEXWokvt7diZkA/9Bk8ESvPvdXu
        chiMXGfXnpGhVmCICZ4EpmBi/6pQ4N2Roagmxqka3RhrNFr6mu89XRR4FFhTdOtn4NhxO/RW
        C9Up1Sp4XzReHgbF53OY0KAG+h54n+JzzUHWCQxx+7smJWdkXdHnuAkCYraNKYIgMiIu7Br2
        Lp+KEQN6oqtvV/QaPBqBfx3ErXAKY8qJyCNuYd/SPzC0jx+6dOuHEdP/wrGHX+mZShAWgAQG
        Ig8hx6URpVQCgqBS15sXkjxZn7aknwzV/rxvwUlFp1wi64a++gwLxQNMr642rliXHjhk/giJ
        HCIw8AuxCwEoJe7mMg6dscuACqHK10vRyEpt+DJ2rbH+o35zUH5uiDaUogBTEOUaNED5Mm2x
        ItiwvXzly+Voap9kZDPS0vg9yDiDUPlqMRpoSy02xJIszBRlSv8KxvazLd1QVkhEJv5uYxtj
        2xyrdDOlCihfY2kjK7XAxtih9fqP+g15+TkM0RjQBRgULNcADcqXQdsVwUZ6YRhKFgkMCaHY
        3LmYtg67ELbj2Wsf3hm5SZadY4ogCIIgCMIUSGAg8g6JdzC5siAgMJB6jca/KQx2xdM58BYW
        65KyGH019UqfC9+Oft41UKOGac2733aEixZLwoVhKKEy+GRotPRN2jux8cfRx1VwbWdg13It
        PljA2skpAgMUDxH4s2h0Skpg2IWM3MU5fFzfWhU3KfSPTbOVySp+pETxcCZqampeC7GvVfph
        y2PDFRvly2VoorOLLwgMI4wUGKK2d4S96nxZuPruUlcUySqM7l++hyPWoEUmxAX1uF2D9yl+
        J/dxPVrbqT+XsWmGlelfOMysKZYW5T+PdaiCflsewwJam4gFBQblS2wb1h4tm9aGl7sNWI33
        gqbx49LG3QveTVuh46Rj4h+lT7aOKYIgCIIgCBMggYHIM2gFBMYRrde9S2HUKxG2oims+cW6
        pPhgnE3Dg5H7dAxT/Xzh62ta85t6LKnOf/wFBHgKO7Ms3HofSdNgSjpfe/5831vUXTv74fBp
        dxcUViXzk6LipNsmloLURwwebJmAfn38MWVtEN4Z7Y2uxKfrGzHVvye69xuDpadf8aaoMXzH
        0d7qkqOMrAom3TTBHT5TWLp/LUfMgy2Y0K8P/KesRZDxFy4Pk91jiiAIgiAIwnhIYCDyCEkC
        Alu4Jw7HiC9r4D5jc7uCYISdwB6HVDWp5R/e4L3F1uwKhMz2VgsaJYfhQqrv4fB5czvV7qSk
        eH8cN8ilPZejeIKFDYRrUADSSpNwO7dYwIbw/Qh6Fxa8USQo3vMg0imPbjnycv/mR3LCmCII
        giAIgjASEhiIvIGOgODe95gqE30yYg+jpxCOwBREu81foPx8GuN7zcJNy/li8wbCvxhX2QqM
        xAMDTqZQPJRv8ZePPRjWBW3WpUySl3eJvzMDtWwZFEirT3ItHD5sag8nlbjVEVvfZd/VzJv9
        mx/JOWOKIAiCIAjCGEhgIPIGMfvh58yiAG+wdzuQ2rBKvDcVVYWyeaw7Oi9cj5Ed+mDTS8tv
        8f64PgN1nFjY1pyMq9rTikXIX+1RVGKN8v0PwqAiB3mGeATPbwgnloFt3bkIyQu77Al3MLW6
        DIykOLruCs9msSgP9m9+JEeNKYIgCIIgCMMhgYHIE8SdHoiiQnlKx07YEZnal1gRPB0/qbKx
        84ZXeT+sf2RJ1wVdOERemY8OZe3hUKE1Bo0ZjYEtK8DBvizaB57Dh/xYH0kZht3dPSFjndB8
        +bNckysgbRR4sbw5HFlbVB9zHmkMvawnT/VvfiQHjimCIAiCIAgDIYGByB9w0XiwbzmWbT6P
        0KzSFnSRf8Dto1uwcsE8LNl4HPc/5XOzL+4hVv1SDDL7OphxM1VAS64h/v5cNHC0RtkeO/Eq
        J13SPNK/+ZEcO6YIgiAIgiAMgAQGgiCyh/in2Ny9AuxLdML6J8bVbMgJJL7agW5lnFHNfz9e
        50RDMJf3b34kx48pgiAIgiCIDCCBgSCI7IP7imuLO8OrXBssuBGF3OENziHq5mJ0qFgN3Vbd
        RnROPulc2b/5kVw0pgiCIAiCINKBBAaCILKd7yG7MLZ9SwzdFya+klOJx51lXeDjOwUHn2dH
        rI1p5J7+zY/kzjFFEARBEASRFiQwEASRQ4jDx4/fxH/nVBLx+f3nXJo4MTf0b34kN48pgiAI
        giCI5JDAQBAEQRAEQRAEQRBEpiGBgSAIgiAIgiAIgiCITEMCA0EQBEEQBEEQBEEQmYYEBoIg
        CIIgCIIgCIIgMg0JDARBEARBEARBEARBZBoSGAiCIAiCIAiCIAiCyDQkMBAEQRAEQRAEQRAE
        kUmA/w94ssZwZg0fggAAAABJRU5ErkJggg==
       </office:binary-data>
      </draw:image>
     </draw:frame></text:span><text:span text:style-name="T8"><text:line-break/><text:line-break/></text:span><text:span text:style-name="T13">import math</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13">import matplotlib.pyplot as plt</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13">from statistics import StatisticsError</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13">from misc import input_x</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13">import numpy as np</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13">class AsinCalculation:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="4"/>EPS = 1e-10</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="4"/>def __init__(self, x: float | int):</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>self.x = x</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>self.seq = list()</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="4"/>def custom_factorial(self, x: int) -&gt; int:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>&quot;&quot;&quot;Function to calculate factorial of a number</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>Args:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="12"/>x (int): number to calculate factorial</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>Returns:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="12"/>int: factorial of a number</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>if x == 1 or x == 0:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="12"/>return 1</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>else:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="12"/>return x * self.custom_factorial(x - 1)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="4"/>def calculate_asin(self) -&gt; float | int:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>&quot;&quot;&quot;Function to calculate asin(x) using Taylor series</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>Returns:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="12"/>float | int: tuple with n and result</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>result = 0</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>prev_result = 0</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>for n in range(500):</text:span></text:p>
   <text:p text:style-name="P11"><text:soft-page-break/><text:span text:style-name="T13"><text:s text:c="12"/>result += self.custom_factorial(2 * n) / (</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="16"/>self.custom_factorial(n) ** 2 * 4**n * (2 * n + 1)) * self.x**(2 * n + 1)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="12"/>self.seq.append(result)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="12"/>if abs(result - prev_result) &lt; self.EPS:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="16"/>break</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="12"/>prev_result = result</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>return (n, result,)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="4"/>def custom_mean(self):</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>&quot;&quot;&quot;Function to calculate mean of a list</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>Returns:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="12"/>_type_: str</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>return f&quot;Mean of seq elements: {sum(1 for i in self.seq) / len(self.seq)}&quot;</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="4"/>def custom_median(self):</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>&quot;&quot;&quot;Return the median (middle value) of numeric data.</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>When the number of data points is odd, return the middle data point.</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>When the number of data points is even, the median is interpolated by</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>taking the average of the two middle values:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>data = sorted(self.seq)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>n = len(data)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>if n == 0:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="12"/>raise StatisticsError(&quot;no median for empty data&quot;)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>if n % 2 == 1:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="12"/>return data[n // 2]</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>else:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="12"/>i = n // 2</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="12"/>return (data[i - 1] + data[i]) / 2</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="4"/>def custom_mode(self):</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>&quot;&quot;&quot;Function to find most frequent element in a list</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>Returns:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="12"/>_type_: list</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>most = max(list(map(self.seq.count, self.seq)))</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>return list(set(filter(lambda x: self.seq.count(x) == most, self.seq)))</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="4"/>def custom_variance(self):</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>&quot;&quot;&quot;Function to calculate variance of a list</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>Returns:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="12"/>_type_: </text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>n = len(self.seq)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>if n &lt; 2:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="12"/>return None</text:span></text:p>
   <text:p text:style-name="P11"><text:soft-page-break/><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>mean = sum(self.seq) / n</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>variance = sum((x - mean) ** 2 for x in self.seq) / (n - 1)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>return variance</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="4"/>def custom_std(self):</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>&quot;&quot;&quot;Return the sample standard deviation of data.</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>Args:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="12"/>data (_type_): list of data</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>Returns:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="12"/>_type_: float</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>n = len(self.seq)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>if n &lt; 2:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="12"/>return None</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>mean = sum(self.seq) / n</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>variance = sum((x - mean) ** 2 for x in self.seq) / (n - 1)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>std = math.sqrt(variance)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>return std</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="4"/></text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="4"/>def build_custom_asin(self):</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>&quot;&quot;&quot;Function to build custom asin(x) function</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>x_values = range(len(self.seq))</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>fig, ax = plt.subplots(figsize=(8, 4))</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>ax.plot(x_values, self.seq, marker=&apos;o&apos;, linestyle=&apos;-&apos;, color=&apos;b&apos;, label=&apos;Custom asin(x) function&apos;)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/></text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>y_values = np.arcsin(x_values)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>ax.plot(x_values, y_values, marker=&apos;o&apos;, linestyle=&apos;-&apos;, color=&apos;r&apos;, label=&apos;Numpy arcsin(x) function&apos;)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>plt.legend()</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>plt.savefig(&quot;plot.png&quot;)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>plt.tight_layout()</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>plt.show()</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13">def task_3():</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="4"/>num = input_x()</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="4"/>is_breaked = False</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="4"/>obj = AsinCalculation(num)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="4"/>obj.calculate_asin()</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="4"/>while True:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>step = int(input(&quot;Other steps:\n1. Calculate custom asin\n2. Custom median fucntion\n3. Custom mode fucntion\n4. Custom std fucntion\n5. Custom var fucntion\n6. Exit\n&quot;))</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>match step:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="12"/>case 1:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="16"/>print(obj.build_custom_asin())</text:span></text:p>
   <text:p text:style-name="P11"><text:soft-page-break/><text:span text:style-name="T13"><text:s text:c="12"/>case 2:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="16"/>print(obj.custom_median())</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="12"/>case 3:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="16"/>print(obj.custom_mode())</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="12"/>case 4:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="16"/>print(obj.custom_std())</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="12"/>case 5:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="16"/>print(obj.custom_variance())</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="12"/>case 6:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="16"/>is_breaked = True</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="16"/>break</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="12"/>case _:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="16"/>print(&quot;Wtf are you doing here?&quot;)</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>if is_breaked:</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="12"/>break</text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T13"><text:s text:c="8"/>continue</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:line-break/><text:line-break/></text:span><draw:frame draw:style-name="fr2" draw:name="Image3" text:anchor-type="char" svg:width="6.6929in" svg:height="3.9098in" draw:z-index="4"><draw:image draw:mime-type="image/png">
      <office:binary-data>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
       ImLp0qUa8HdSnm1n2djYWFhYqLo+ZeoqVnwfTd3v8mw7S8P2+/HjxyXtjRs30q2LjIxs06aN
       TDeN3O9ybjtLw/Z7jx49JO0FCxbQf+X++ecfmfChkTudyLftLA3b6az09PTBgwf/9ttvQUFB
       hXZQq/2uLcErNzeX/uszc+ZMyRL6i+CVK1dkul29epUulzz08vIKDw/Py8vT09NTUaFKIOe2
       sxo3bpydnV2/fv05c+bIHJTWYBq530tFg/d7SkoK/WlpaVnwKY3f78VsO0tT97tAINizZ09G
       RkbLli1lntL4nV7MtrM0cqf/+OOP3bt379SpU1HBS632u7YEr4SEBPrH0dbWVrKEtuPi4mS6
       0SUyffLz8+lr7e3tVVSoEsi57XQb169f36RJk5ycnK1bt3bs2PHcuXNF/aKsYTRyv8tJs/e7
       SCTy8fH56quv3N3dCz6r2fu9+G3X1P1+9+5dGjhosDA1Nd2/fz+NFzIdNHinl7jtmrrT//jj
       j5s3b964caOYPmq137UleLF4PJ6kTf9Vkn5YVB+ZJRVXidteR4xt07+9r1+/Xrp0qQb8nZST
       pu73Emn2fp8wYcK///576dKlojpo8H4vfts1db/Tjbp9+3ZycvKff/45dOjQ8+fPF8wfmrrT
       S9x2jdzpdCsmT5588uRJQ0PD4nuqz37XluBlbW2tq6srfZgnPj5eOv+y7OzsZPrw+XwrKysV
       Vakccm67jBYtWmzbtk3JpakLjdzvZaNJ+33ixImHDh26cOGCo6NjoR00eL+XuO0yNGa/6+vr
       swPMmzZteuPGjZUrV65bt066gwbv9BK3XYZm7PTIyEi6E5s0acI+FAgE9I/96tWrc3Jy6Bef
       pJta7XdtCV70TyTdMadOnerTpw+7hLZ79eol043+EnD48GHJQxqi6Z/gin7uX85tl3Hr1i0N
       OPYuJ43c72WjGfud/jpLk8f+/fvPnTtXrVq1orpp5H6Xc9tlaMZ+l0E/CvrtK7NQI3d6QYVu
       uwzN2OkdO3a8e/eu5OHw4cPr1q37888/S6cuomb7XVuCF+Xj4+Pt7U0/a7oD1q9fHx0dzU7j
       4evrGxMTs2XLFtqmS2hSpj1Hjx599erV8PDwnTt3cl24Asiz7aGhoa6urm5ubrm5ufTXoD/F
       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
       08/h0aNHcnZWFJrwpB/++uuvR44cIeKgKfMs3TV2dnbR0dEqrhAAQFPpOPSa9/OZfiEB+5qv
       6Z21Ze6qN50WrezIpK68f/w7jdz1vuAFd3rN557aMNBGKpgJMt9cOXg+xrpRY8cCx6YEb/b6
       h2UP++17l+d3CitAGPPXgUjzLr+2MqZtZoYhPUP9j//s8wwMDYQx//77TtjQ4dM3gY79172a
       rVx/9N8f3Roz5/9SLx0+p9dpWUuTUhVcpPy75y6lufdJ/3VE178epBi5NO872feH1ja62ff/
       fWrQcEx99giXjtUXTVxSTt99I2hdQ7ekDSxGWYLXy5cvx44dGxUVRaPAypUrr127tnbtWiIe
       PrVp06ZJkyYlJiaWYbWksNTl6el58eLF3r17HzhwoOBPeTKZt7c3DTeFroFmr4LvWM7sJbmG
       MScnR57+7DD2Yq5zlEweQbe0+GFhrq6uBgYG7PumpKSUsvBC0L8Lx44dY+fcokmoc+fOZmZm
       5V8ti66Nrjw5OVmyhP1jQzehffv2MqlRckAOAAAUQcfum7m+Z/oGzll0P2tfbJelq9tXFkcU
       fsNxmw4Myi/4Ap6xjeRwWO6ZGa0nHEkXCvn2HXzXzWTS02cEr3bNXy8YvmGAi67geWHvLnh+
       +OA9224zmjCHjnQcvmzuuPxA+N6eC7+rbfD+8vodN/KEVROSRMThv3e36tS71ZIlR25NbtzM
       QJR87tAlsy5hXxrJW3AJsuNiEnOubdpqPn1++CzDF/tC5k+YpLd7+wiTxA9Cc3fLT7FSp7KV
       JUlK/CAiriVtYHFKHbyuXLkyefLk1NRUmgNWrFixevXqU6dOsU9t2LDh2bNnNHtNmzaNvQKR
       HWIvp4IZSJ6fxa9z+vTpNHWVdp10Q2iILO0nQz6fOWLnzp2ScV0UO/KdOnnypPQFBxkZGWyj
       qOwlmRZVnhO4RZ2wKxu6Z2fMmCF5SPemAofBVa1adffu3YpaGwAAlI6OTbfZM070nLHLuN+v
       69pafPyq4RnZVKtV0jheveY+fxwcmZ0UdWnb8tAZq2tt++lLqeH1gpfb5/6uM2pzf2eaWAqd
       kT3/weEjz1y/CW7AHkriu49ZOuvN9GV9mgfp6ho6d+rXqcbTRzqfhyaeedve7Rf4Hb4xrVnr
       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
      </office:binary-data>
     </draw:image>
    </draw:frame><text:span text:style-name="T12">Задание 4. </text:span><text:span text:style-name="T13">В соответствии с заданием своего варианта разработать базовые классы и классы наследники. </text:span></text:p>
   <text:p text:style-name="P15"><text:span text:style-name="T2">Требования по использованию классов:</text:span></text:p>
   <text:p text:style-name="P15"><text:span text:style-name="T2">Абстрактный класс «Геометрическая фигура» содержит абстрактный метод для вычисления площади фигуры (</text:span><text:a xlink:type="simple" xlink:href="https://docs.python.org/3/library/abc.html" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Internet_20_link"><text:span text:style-name="T2">https://docs.python.org/3/library/abc.html</text:span></text:span></text:a><text:span text:style-name="T2"> )</text:span></text:p>
   <text:p text:style-name="P15"><text:span text:style-name="T2">Класс «Цвет фигуры» содержит свойство для описания цвета геометрической фигуры (</text:span><text:a xlink:type="simple" xlink:href="https://docs.python.org/3/library/functions.html#property" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Internet_20_link"><text:span text:style-name="T2">https://docs.python.org/3/library/functions.html#property</text:span></text:span></text:a><text:span text:style-name="T2"> )</text:span></text:p>
   <text:p text:style-name="P15"><text:span text:style-name="T2">Класс «Прямоугольник» (Круг, Ромб, Квадрат, Треугольник и т.д.) наследуется от класса «Геометрическая фигура». Класс должен содержать конструктор по параметрам «ширина», «высота» (для другого типа фигуры соответствующие параметры, например, для круга задаем «радиус») и «цвет». В конструкторе создается объект класса «Цвет фигуры» для хранения цвета. Класс должен переопределять метод, вычисляющий площадь фигуры </text:span><text:a xlink:type="simple" xlink:href="https://docs.python.org/3/library/math.html" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Internet_20_link"><text:span text:style-name="T4">https</text:span></text:span></text:a><text:a xlink:type="simple" xlink:href="https://docs.python.org/3/library/math.html" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Internet_20_link"><text:span text:style-name="T2">://</text:span></text:span></text:a><text:a xlink:type="simple" xlink:href="https://docs.python.org/3/library/math.html" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Internet_20_link"><text:span text:style-name="T4">docs</text:span></text:span></text:a><text:a xlink:type="simple" xlink:href="https://docs.python.org/3/library/math.html" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Internet_20_link"><text:span text:style-name="T2">.</text:span></text:span></text:a><text:a xlink:type="simple" xlink:href="https://docs.python.org/3/library/math.html" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Internet_20_link"><text:span text:style-name="T4">python</text:span></text:span></text:a><text:a xlink:type="simple" xlink:href="https://docs.python.org/3/library/math.html" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Internet_20_link"><text:span text:style-name="T2">.</text:span></text:span></text:a><text:a xlink:type="simple" xlink:href="https://docs.python.org/3/library/math.html" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Internet_20_link"><text:span text:style-name="T4">org</text:span></text:span></text:a><text:a xlink:type="simple" xlink:href="https://docs.python.org/3/library/math.html" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Internet_20_link"><text:span text:style-name="T2">/3/</text:span></text:span></text:a><text:a xlink:type="simple" xlink:href="https://docs.python.org/3/library/math.html" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Internet_20_link"><text:span text:style-name="T4">library</text:span></text:span></text:a><text:a xlink:type="simple" xlink:href="https://docs.python.org/3/library/math.html" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Internet_20_link"><text:span text:style-name="T2">/</text:span></text:span></text:a><text:a xlink:type="simple" xlink:href="https://docs.python.org/3/library/math.html" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Internet_20_link"><text:span text:style-name="T4">math</text:span></text:span></text:a><text:a xlink:type="simple" xlink:href="https://docs.python.org/3/library/math.html" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Internet_20_link"><text:span text:style-name="T2">.</text:span></text:span></text:a><text:a xlink:type="simple" xlink:href="https://docs.python.org/3/library/math.html" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Internet_20_link"><text:span text:style-name="T4">html</text:span></text:span></text:a><text:span text:style-name="T2"> .</text:span></text:p>
   <text:p text:style-name="P15"><text:span text:style-name="T2">Для класса «Прямоугольник»(тип фигуры в инд. задании) </text:span></text:p>
   <text:p text:style-name="P15"><text:soft-page-break/><text:span text:style-name="T2">определить метод, который возвращает в виде строки основные параметры фигуры, ее цвет и площадь. Использовать метод </text:span><text:span text:style-name="T4">format</text:span><text:span text:style-name="T2"> (</text:span><text:a xlink:type="simple" xlink:href="https://pyformat.info/" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Internet_20_link"><text:span text:style-name="T2">https://pyformat.info/</text:span></text:span></text:a><text:span text:style-name="T2"> )</text:span></text:p>
   <text:p text:style-name="P15"><text:span text:style-name="T2">название фигуры должно задаваться в виде поля данных класса и возвращаться методом класса.</text:span></text:p>
   <text:p text:style-name="P15"><text:span text:style-name="T2">В корневом каталоге проекта создайте файл </text:span><text:span text:style-name="T4">main</text:span><text:span text:style-name="T2">.</text:span><text:span text:style-name="T4">py</text:span><text:span text:style-name="T2"> для тестирования классов. Используйте конструкцию, описанную в </text:span><text:a xlink:type="simple" xlink:href="https://docs.python.org/3/library/__main__.html" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Internet_20_link"><text:span text:style-name="T2">https://docs.python.org/3/library/__main__.html</text:span></text:span></text:a><text:span text:style-name="T2"> </text:span></text:p>
   <text:p text:style-name="P15"><text:span text:style-name="T2">Пример объекта: Прямоугольник синего цвета шириной 5 и высотой 8.</text:span></text:p>
   <text:p text:style-name="P15"><text:span text:style-name="T2">Программа должна содержать следующие базовые функции:</text:span></text:p>
   <text:list xml:id="list1959725020" text:style-name="WWNum24">
    <text:list-item>
     <text:p text:style-name="P4"><text:span text:style-name="T2">ввод значений параметров пользователем;</text:span></text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="P16"><text:span text:style-name="T2">2) проверка корректности вводимых данных;</text:span></text:p>
   <text:p text:style-name="P16"><text:span text:style-name="T2">3) построение, закрашивание фигуры в выбранный цвет, введенный с клавиатуры, и подпись фигуры текстом, введенным с клавиатуры;</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13">4) вывод фигуры на экран и в файл.<text:line-break/></text:span></text:p>
   <table:table table:name="Table1" table:style-name="Table1">
    <table:table-column table:style-name="Table1.A"/>
    <table:table-row table:style-name="Table1.1">
     <table:table-cell table:style-name="Table1.A1" office:value-type="string">
      <text:p text:style-name="P14"><text:span text:style-name="T8">Построить ромб, диагонали которого равны a и b. Ромб расположить так, чтобы одна из его диагоналей была горизонтальной.</text:span></text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:line-break/>import math</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13">import matplotlib.pyplot as plt</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13">import numpy as np</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13">from abstractions import GeometricFigure</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13">from misc import input_x</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13">class FigureColor:</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>COLORS = {</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>&quot;w&quot;: &quot;white&quot;,</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>&quot;g&quot;: &quot;green&quot;,</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>&quot;b&quot;: &quot;blue&quot;,</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>&quot;y&quot;: &quot;yellow&quot;</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>}</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>def __init__(self, color: str=None):</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>self.__color = color</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/></text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>@property</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>def color_ch(self):</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>return self.__color</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/></text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>@color_ch.setter</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>def color_ch(self, color):</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>self.__color = color</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13">class Rhombus(GeometricFigure):</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>N = 6</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>FIGURE_NAME = &quot;Rhombus&quot;</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>def __init__(self, a_length: int, b_lenth: int):</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>self.__a_length = a_length</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>self.__b_length = b_lenth</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>self.obj_color = FigureColor()</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/></text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>@classmethod</text:span></text:p>
   <text:p text:style-name="P13"><text:soft-page-break/><text:span text:style-name="T13"><text:s text:c="4"/>def get_figure_name(cls):</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>&quot;&quot;&quot;Function to get figure name</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>Returns:</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="12"/>_type_: str</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>return f&quot;Figure name: {cls.FIGURE_NAME}&quot; </text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>@property</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>def get(self):</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>return self.__a_length, self.__b_length</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/></text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>@get.setter</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>def get(self, lengths):</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>self.__a_length, self.__b_length = lengths</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/></text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>def area(self):</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>&quot;&quot;&quot;Function to calculate rhombus&apos;s area</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>Returns:</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="12"/>_type_: str</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>return f&quot;Area: {self.__a_length * self.__b_length}&quot;</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/></text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/></text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>def __str__(self):</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>return f&quot;Figure name: {self.get_figure_name()}\nSide a: {self.__a_length}\nSide b: {self.__b_length}\nColor: {self.obj_color.color_ch}&quot;</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/></text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>def plot_rhombus(self):</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>&quot;&quot;&quot;Function to plot rhombus</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>x = [0,self.__a_length / 2, self.__a_length, self.__a_length / 2, 0] </text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>y = [0, self.__b_length / 2, 0, -self.__b_length / 2, 0]</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>plt.figure()</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>plt.plot(x, y, linewidth=2)</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>color = str(self.obj_color.color_ch)</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>plt.fill(x, y, color) <text:s/></text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>plt.axis(&apos;equal&apos;)</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>plt.title(self.FIGURE_NAME)</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>plt.savefig(&quot;rhombus.jpg&quot;)</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>plt.show()</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/></text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13">def task_4(): </text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>side_a = int(input(&quot;Enter side a: &quot;))</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>side_b = int(input(&quot;Enter side b: &quot;))</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>is_breaked = False</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>obj = Rhombus(side_a, side_b)</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>while True:</text:span></text:p>
   <text:p text:style-name="P13"><text:soft-page-break/><text:span text:style-name="T13"><text:s text:c="8"/>step = int(input(&quot;Other steps:\n1. Calculate rhombus&apos;s area\n2. Plot rhombus\n3. Output class data\n4. Change side len\n5. Change figure color\n6. Exit\n&quot;))</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>match step:</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="12"/>case 1:</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="16"/>print(obj.area())</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="12"/>case 2:</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="16"/>obj.plot_rhombus()</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="12"/>case 3:</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="16"/>print(obj)</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="12"/>case 4:</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="16"/>new_side_a = int(input(&quot;Enter new side a: &quot;))</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="16"/>new_side_b = int(input(&quot;Enter new side b: &quot;))</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="16"/>obj.get = new_side_a, new_side_b</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="12"/>case 5:</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="16"/>color = input(f&quot;Change color: {FigureColor.COLORS}: &quot;)</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="16"/>obj.obj_color.color_ch = color</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="12"/>case 6:</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="16"/>is_breaked = True</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="16"/>break</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="12"/>case _:</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="16"/>print(&quot;Invalid choice. Please try again.&quot;)</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>if is_breaked:</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="12"/>break</text:span></text:p>
   <text:p text:style-name="P13"><text:soft-page-break/><text:span text:style-name="T13"><text:s text:c="8"/>continue<text:line-break/><text:line-break/><text:line-break/></text:span><draw:frame draw:style-name="fr1" draw:name="Image4" text:anchor-type="char" svg:x="0.2917in" svg:y="0.2626in" svg:width="6.1098in" svg:height="5.261in" draw:z-index="5"><draw:image draw:mime-type="image/png">
      <office:binary-data>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
       i6+//vqPP/6Ynp5ep06dL774onHjxrIHZTM5OTmTJk1aunTplStXgoODo6Oj33zzTU9PT9nj
       KpHt27eLW5X9+/eLG5bVq1c/88wz6nqDwTB58uQFCxbcunWrWbNmn376qbjZkTrSYrJ4BbOz
       s8X3bv369adPny5XrlyHDh3ee+897b7oVTEojz7e8eLy72QPQ0tWrlw5evRokeFHHnlk/vz5
       nTt3PnbsWFhYmOxx2ca2bduGDx/etGlTcTM3YcKEjh07imvn5+cne1y2t3fvXnG71qBBA9kD
       sT1xYy1+ONu2bSsaXLly5VOnTpUvX172oGxJ3DX87LPPlixZImq0b9++fv36iZtvcV9K9rhK
       JDU1tWHDhuK6PP/88+brP/jgg48++mjx4sXivtS0adMee+yx48eP+/v7yxpnsVm8gmlpaXFx
       cRMnThRniZ9bcdP61FNPie+pxHE6mLLlr4zSAeVlD0NLxO/DgAEDBg4cKJbF/Omnn36aN2+e
       mFHJHpdtbNiwwbQcExMjbsHF/dZWrVpJHJI9pKSk9O7de+HCheJGTfZYbE8kKjQ0VHz71JPh
       4eFSh2N7u3fvfvrpp7t06aIzXrvly5e7wK12Z6M8K8UkWNzIiHvDzz33nDgp7nZUqVJl2bJl
       gwcPljHGErF4BcWdp02bNplOzp49+6GHHjp37pzLzGoKpVw7vD0lUy97GJqRlZUlmvTGG2+Y
       1oiZ4q5duyQOyX6SkpLEx8DAQNkDsT0x1xe34B06dHDJBsfGxnbq1Klbt27btm2rVq3asGHD
       Bg0aJHtQtvToo4+KefCJEyfE1PDQoUM7duxwvUcTVGfOnLly5Yq4kVFPent7t27dWtzgaLHB
       1hC3OR4eHi72Z5uCKTqdXp/JA8LWun79em5urrgralojlsUvicQh2Ym4Az5mzBhxYxcZGSl7
       LDa2YsWKuLi4vXv3yh6IvZw+fXrevHni2zd+/Pg9e/a8/PLL4rb7pZdekj0um3n99dfFjXW9
       evW8vLzE7+M777zTs2dP2YOyC/W2Jc8NztmzZ+WNyI4yMjLE9KZXr16u/R4VeXBcdHGYv+mh
       aFVJ3gPRaY0YMeKPP/4QMwzZA7Gx8+fPjxo1auPGjT4+PrLHYi96vb5JkybvvvuuWG7UqNHR
       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
       7tatm1gjJsfiWly/fn3t2rViTmnaWHwNT548md/TiIvE19dXfJVKvh+L1KPGJk+enN+fzS9d
       uiTuBHA4NAD3oeTqcg36ot3qiSSoL+mwf/9+0ys6FfPiFSW/DIuclylTpiQ7NyfSIuboNg+w
       SmT4448/tnLjJkaFbjZy5EjxUc2wznj8l2BxSzF9HDp06Lx58x555BErx6AS9xvUl64UwsLC
       li9frok3QwQAl6H8ELv6VnpukT5HzI/V144Q+Sxhg3UFZjgjI8PHx6eE+9fZOcD2IzJctWrV
       zz//3HzWaxIeHt6lSxeRXr1eb2WGjx49ajomq3z58uIulOmJ3WJBzM7FnNviJ1aoUMF+b6wE
       AG5Lycgo0ctM2mYQ+We45DsX0zsHB3jUqFHnzp27fPmyenL79u3PPvtscHDw7Nmzvby8irSr
       bt26de3adceOHd9+++2FCxfS0tL8/PzENLp9+/aNGzcWe6tZs+bYsWOtzPCnn35qmvj+4x//
       yHPusmXL8nv+rmPeswEA3I21r1VpbxYzLJJQjDfHzaNnz54OngFfvHjx2LFjppNJRuq7XBSD
       h4dHSyOL56pHYpsyPGTIkKVLl+Y3Zx04cKDpyG0xtZ0yZYr5uSL2+b1qdFBQUPEGr44/Kytr
       yZIl6lOTY2Nj83uLJ/UZUIcOHRIbp6am8odxAC6v8AYHBARYv7ty5coVfyj/m+E333xz2rRp
       xd6bOQf/CXrRokWmJyyp6tSps3jx4qJOgq0ksipy9dprr4kMi9pt2bIlvwbnmftGRkaaJuuh
       oaHisxo2bGjz4UVERPz888+m92VasGBBwdv/aqR+os0HAwBOpfAGi1vqDRs2mL8ClOklmVq3
       bm16iqrO+MK/tWrVKtFoFEV9wpKYLdkqwCp1Vu2Yx4DNn7Ck+//PAy7gKOiS++c//yky/Prr
       r/v7+4tlKz+r4PcMtpVhw4Z16tSpgCeXWyR+Euzxvh0A4FSs+lt0zZo1La4vZ2TT8ejUyeJT
       Tz1l290KJf+ztvXUDPfv319MTMWCXQOs6tKlS9u2bUW6rH8Gl8OU8J4ZALgqZ3k82MlFRUXd
       u3LlypUFf1a3bt10xjdCsP6CCt2nE7L4xQEAFMpCg+2XAS3uOT8nTpzo3r278+9TJ6nrWrwz
       AQAOpuQ5+tROGdDonl2AlC8O3xEAsAZ/iwYAQA4aDACAHDQYAAA5aDAAAHLQYAAA5Mh7XDQA
       AHCMv+fBkZGR1mytvr+6+sLOdhwUAMCFiGro9fLfo8+2lFKWX5QwJzvLyj2IOfD/A9pv8tEC
       oVUvAAAAAElFTkSuQmCC
      </office:binary-data>
     </draw:image>
    </draw:frame><text:span text:style-name="T12">Задание 5. </text:span><text:span text:style-name="T13">В соответствии с заданием своего варианта исследовать возможности библиотека NumPy при работе с массивами и математическими и статическими операциями. Сформировать целочисленную матрицу А[n,m] с помощью генератора случайных чисел (random).</text:span></text:p>
   <text:p text:style-name="P15"><text:span text:style-name="T2">а) Библиотека NumPy.</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T2">1. Создание массива. Функции array() и values().</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T2">2. Функции создания массива заданного вида.</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T2">3. Индексирование массивов NumPy. Индекс и срез.</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T2">4. Операции с массивами. Универсальные (поэлементные) функции.</text:span></text:p>
   <text:p text:style-name="P17"/>
   <text:p text:style-name="P15"><text:span text:style-name="T2">б) Математические и статистические операции.</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T2">1. Функция mean()</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T2">2. Функция median()</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T2">3. Функция corrcoef()</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T2">4. Дисперсия var().</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13">5. Стандартное отклонение std()<text:line-break/><text:line-break/></text:span></text:p>
   <table:table table:name="Table2" table:style-name="Table2">
    <table:table-column table:style-name="Table2.A"/>
    <table:table-row table:style-name="Table2.1">
     <table:table-cell table:style-name="Table2.A1" office:value-type="string">
      <text:p text:style-name="P14"><text:span text:style-name="T8">Посчитать количество элементов матрицы, превосходящих среднее арифметическое значение элементов матрицы.</text:span></text:p>
      <text:p text:style-name="P14"><text:span text:style-name="T8">Вычислить стандартное отклонение для этих значений. Ответ округлите</text:span></text:p>
      <text:p text:style-name="P14"><text:soft-page-break/><text:span text:style-name="T8">до сотых. Вычисление стандартного отклонения выполнить двумя способами:</text:span></text:p>
      <text:p text:style-name="P14"><text:span text:style-name="T8">через стандартную функцию и через программирование формулы.</text:span></text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:line-break/><text:line-break/>import numpy as np</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13">class NumPUtils:</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>A utility class for performing various calculations on a NumPy matrix.</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>Attributes:</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>matrix (ndarray): The NumPy matrix.</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>Methods:</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>mean: Calculates the mean of the matrix.</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>median: Calculates the median of the matrix.</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>corrcoef: Calculates the correlation coefficient of the matrix.</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>var: Calculates the variance of the matrix.</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>std: Calculates the standard deviation of the matrix.</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>count_greater_than_mean: Counts the number of values in the matrix that are greater than the mean.</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>std_of_values_greater_than_mean: Calculates the standard deviation of the values in the matrix that are greater than the mean.</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>&quot;&quot;&quot;</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>def __init__(self, n, m):</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>self.matrix = np.random.randint(100, size=(n, m))</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>def mean(self):</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>return np.mean(self.matrix)</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>def median(self):</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>return np.median(self.matrix)</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>def corrcoef(self):</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>return np.corrcoef(self.matrix)</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>def var(self):</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>return np.var(self.matrix)</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>def std(self):</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>return np.std(self.matrix)</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>def count_greater_than_mean(self):</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>mean = self.mean()</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>count = np.sum(self.matrix &gt; mean)</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>return count</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>def std_of_values_greater_than_mean(self):</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>mean = self.mean()</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>values = self.matrix[self.matrix &gt; mean]</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>std1 = np.std(values)</text:span></text:p>
   <text:p text:style-name="P13"><text:soft-page-break/><text:span text:style-name="T13"><text:s text:c="8"/>std2 = np.sqrt(np.mean((values - np.mean(values)) ** 2))</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="8"/>return round(std1, 2), round(std2, 2)</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"/></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13">def task_5():</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>npu = NumPUtils(5, 5)</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>print(&quot;Matrix:\n&quot;, npu.matrix)</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>print(&quot;Mean:&quot;, npu.mean())</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>print(&quot;Median:&quot;, npu.median())</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>print(&quot;Correlation Coefficient:\n&quot;, npu.corrcoef())</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>print(&quot;Variance:&quot;, npu.var())</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>print(&quot;Standard Deviation:&quot;, npu.std())</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>print(&quot;Count of elements greater than mean:&quot;, npu.count_greater_than_mean())</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s text:c="4"/>print(&quot;Standard Deviation of values greater than mean (two methods):&quot;, npu.std_of_values_greater_than_mean())<text:line-break/><text:line-break/>Matrix:</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s/>[[63 20 93 28 40]</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s/>[19 78 47 75 37]</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s/>[11 55 33 97 96]</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s/>[21 24 81 12 28]</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s/>[39 17 43 65 44]]</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13">Mean: 46.64</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13">Median: 40.0</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13">Correlation Coefficient:</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s/>[[ 1. <text:s text:c="8"/>-0.59895356 -0.62854641 <text:s/>0.83186126 <text:s/>0.11170055]</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s/>[-0.59895356 <text:s/>1. <text:s text:c="9"/>0.50156003 -0.17589425 -0.03402826]</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s/>[-0.62854641 <text:s/>0.50156003 <text:s/>1. <text:s text:c="8"/>-0.38807759 <text:s/>0.44739933]</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s/>[ 0.83186126 -0.17589425 -0.38807759 <text:s/>1. <text:s text:c="8"/>-0.09820105]</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13"><text:s/>[ 0.11170055 -0.03402826 <text:s/>0.44739933 -0.09820105 <text:s/>1. <text:s text:c="7"/>]]</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13">Variance: 714.1504</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13">Standard Deviation: 26.723592572855917</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13">Count of elements greater than mean: 10</text:span></text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T13">Standard Deviation of values greater than mean (two methods): (16.5, 16.5)</text:span></text:p>
  </office:text>
 </office:body>
</office:document>